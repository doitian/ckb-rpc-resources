{
  "components": {
    "schemas": {
      "AlertMessage": {
        "description": "An alert sent by RPC `send_alert`.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Uint32",
            "description": "The unique alert ID."
          },
          "message": {
            "description": "Alert message.",
            "type": "string"
          },
          "notice_until": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The alert is expired after this timestamp."
          },
          "priority": {
            "$ref": "#/components/schemas/Uint32",
            "description": "Alerts are sorted by priority, highest first."
          }
        },
        "required": [
          "id",
          "message",
          "notice_until",
          "priority"
        ],
        "type": "object"
      },
      "ChainInfo": {
        "description": "Chain information.",
        "properties": {
          "alerts": {
            "description": "Active alerts stored in the local node.",
            "items": {
              "$ref": "#/components/schemas/AlertMessage"
            },
            "type": "array"
          },
          "chain": {
            "description": "The network name.\n\nExamples:\n\n* \"ckb\" - Mirana the mainnet.\n* \"ckb_testnet\" - Pudge the testnet.",
            "type": "string"
          },
          "difficulty": {
            "description": "Current difficulty.\n\nDecoded from the epoch `compact_target`.",
            "format": "uint256",
            "type": "string"
          },
          "epoch": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The epoch information of tip block in the chain."
          },
          "is_initial_block_download": {
            "description": "Whether the local node is in IBD, Initial Block Download.\n\nWhen a node starts and its chain tip timestamp is far behind the wall clock, it will enter the IBD until it catches up the synchronization.\n\nDuring IBD, the local node only synchronizes the chain with one selected remote node and stops responding the most P2P requests.",
            "type": "boolean"
          },
          "median_time": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The median time of the last 37 blocks, including the tip block."
          }
        },
        "required": [
          "alerts",
          "chain",
          "difficulty",
          "epoch",
          "is_initial_block_download",
          "median_time"
        ],
        "type": "object"
      },
      "DeploymentInfo": {
        "description": "An object containing various state info regarding deployments of consensus changes",
        "properties": {
          "bit": {
            "description": "determines which bit in the `version` field of the block is to be used to signal the softfork lock-in and activation. It is chosen from the set {0,1,2,...,28}.",
            "format": "uint8",
            "minimum": 0.0,
            "type": "integer"
          },
          "min_activation_epoch": {
            "$ref": "#/components/schemas/Uint64",
            "description": "specifies the epoch at which the softfork is allowed to become active."
          },
          "period": {
            "$ref": "#/components/schemas/Uint64",
            "description": "the length in epochs of the signalling period"
          },
          "since": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The first epoch which the current state applies"
          },
          "start": {
            "$ref": "#/components/schemas/Uint64",
            "description": "specifies the first epoch in which the bit gains meaning."
          },
          "state": {
            "$ref": "#/components/schemas/DeploymentState",
            "description": "With each epoch and softfork, we associate a deployment state. The possible states are:\n\n* `DEFINED` is the first state that each softfork starts. The blocks of 0 epoch is by definition in this state for each deployment.\n* `STARTED` for all blocks reach or past the start_epoch.\n* `LOCKED_IN` for one period after the first period with STARTED blocks of which at least threshold has the associated bit set in version.\n* `ACTIVE` for all blocks after the LOCKED_IN period.\n* `FAILED` for all blocks after the timeout_epoch, if LOCKED_IN was not reached."
          },
          "threshold": {
            "$ref": "#/components/schemas/Ratio",
            "description": "the ratio of blocks with the version bit set required to activate the feature"
          },
          "timeout": {
            "$ref": "#/components/schemas/Uint64",
            "description": "specifies an epoch at which the miner signaling ends. Once this epoch has been reached, if the softfork has not yet locked_in (excluding this epoch block's bit state), the deployment is considered failed on all descendants of the block."
          }
        },
        "required": [
          "bit",
          "min_activation_epoch",
          "period",
          "since",
          "start",
          "state",
          "threshold",
          "timeout"
        ],
        "type": "object"
      },
      "DeploymentState": {
        "description": "The possible softfork deployment state",
        "oneOf": [
          {
            "description": "First state that each softfork starts. The 0 epoch is by definition in this state for each deployment.",
            "enum": [
              "defined"
            ],
            "type": "string"
          },
          {
            "description": "For epochs past the `start` epoch.",
            "enum": [
              "started"
            ],
            "type": "string"
          },
          {
            "description": "For one epoch after the first epoch period with STARTED epochs of which at least `threshold` has the associated bit set in `version`.",
            "enum": [
              "locked_in"
            ],
            "type": "string"
          },
          {
            "description": "For all epochs after the LOCKED_IN epoch.",
            "enum": [
              "active"
            ],
            "type": "string"
          },
          {
            "description": "For one epoch period past the `timeout_epoch`, if LOCKED_IN was not reached.",
            "enum": [
              "failed"
            ],
            "type": "string"
          }
        ]
      },
      "DeploymentsInfo": {
        "description": "Chain information.",
        "properties": {
          "deployments": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DeploymentInfo"
            },
            "description": "`{ [ key:` [`DeploymentPos`](#type-deploymentpos) `]: ` [`DeploymentInfo`](#type-deploymentinfo) `}` deployments info",
            "type": "object"
          },
          "epoch": {
            "$ref": "#/components/schemas/Uint64",
            "description": "requested block epoch"
          },
          "hash": {
            "$ref": "#/components/schemas/H256",
            "description": "requested block hash"
          }
        },
        "required": [
          "deployments",
          "epoch",
          "hash"
        ],
        "type": "object"
      },
      "H256": {
        "description": "The 32-byte fixed-length binary data.\n\nThe name comes from the number of bits in the data.\n\nIn JSONRPC, it is encoded as a 0x-prefixed hex string.",
        "items": {
          "format": "uint8",
          "minimum": 0.0,
          "type": "integer"
        },
        "maxItems": 32,
        "minItems": 32,
        "type": "array"
      },
      "Ratio": {
        "description": "Represents the ratio `numerator / denominator`, where `numerator` and `denominator` are both unsigned 64-bit integers.",
        "properties": {
          "denom": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Denominator."
          },
          "numer": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Numerator."
          }
        },
        "required": [
          "denom",
          "numer"
        ],
        "type": "object"
      },
      "Uint32": {
        "format": "uint32",
        "minimum": 0.0,
        "type": "integer"
      },
      "Uint64": {
        "format": "uint64",
        "minimum": 0.0,
        "type": "integer"
      }
    }
  },
  "info": {
    "description": " RPC Module Stats for getting various statistic data.",
    "title": "stats_rpc",
    "version": "0.115.0-pre"
  },
  "methods": [
    {
      "description": " Returns statistics about the chain.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_blockchain_info\",\n   \"params\": []\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"alerts\": [\n       {\n         \"id\": \"0x2a\",\n         \"message\": \"An example alert message!\",\n         \"notice_until\": \"0x24bcca57c00\",\n         \"priority\": \"0x1\"\n       }\n     ],\n     \"chain\": \"ckb\",\n     \"difficulty\": \"0x1f4003\",\n     \"epoch\": \"0x7080018000001\",\n     \"is_initial_block_download\": true,\n     \"median_time\": \"0x5cd2b105\"\n   }\n }\n ```",
      "name": "get_blockchain_info",
      "params": [],
      "result": {
        "name": "get_blockchain_info",
        "schema": {
          "$ref": "#/components/schemas/ChainInfo"
        }
      }
    },
    {
      "description": " Returns statistics about the chain.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_deployments_info\",\n   \"params\": []\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"epoch\": \"0x1\",\n     \"hash\": \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\",\n        \"deployments\": {\n            \"testdummy\": {\n                \"bit\": 1,\n                \"min_activation_epoch\": \"0x0\",\n                \"period\": \"0xa\",\n                \"since\": \"0x0\",\n                \"start\": \"0x0\",\n                \"state\": \"failed\",\n                \"timeout\": \"0x0\",\n                \"threshold\": {\n                     \"numer\": \"0x3\",\n                     \"denom\": \"0x4\"\n                 }\n            }\n        }\n   }\n }\n ```",
      "name": "get_deployments_info",
      "params": [],
      "result": {
        "name": "get_deployments_info",
        "schema": {
          "$ref": "#/components/schemas/DeploymentsInfo"
        }
      }
    }
  ],
  "openrpc": "1.2.6"
}