{
  "components": {
    "schemas": {
      "CellDep": {
        "additionalProperties": false,
        "description": "The cell dependency of a transaction.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::CellDep>(r#\"\n {\n   \"dep_type\": \"code\",\n   \"out_point\": {\n     \"index\": \"0x0\",\n     \"tx_hash\": \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\"\n   }\n }\n # \"#).unwrap();\n```",
        "properties": {
          "dep_type": {
            "$ref": "#/components/schemas/DepType",
            "description": "Dependency type."
          },
          "out_point": {
            "$ref": "#/components/schemas/OutPoint",
            "description": "Reference to the cell."
          }
        },
        "required": [
          "dep_type",
          "out_point"
        ],
        "type": "object"
      },
      "CellInput": {
        "additionalProperties": false,
        "description": "The input cell of a transaction.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::CellInput>(r#\"\n {\n   \"previous_output\": {\n     \"index\": \"0x0\",\n     \"tx_hash\": \"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17\"\n   },\n   \"since\": \"0x0\"\n }\n # \"#).unwrap();\n```",
        "properties": {
          "previous_output": {
            "$ref": "#/components/schemas/OutPoint",
            "description": "Reference to the input cell."
          },
          "since": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Restrict when the transaction can be committed into the chain.\n\nSee the RFC [Transaction valid since](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0017-tx-valid-since/0017-tx-valid-since.md)."
          }
        },
        "required": [
          "previous_output",
          "since"
        ],
        "type": "object"
      },
      "CellOutput": {
        "additionalProperties": false,
        "description": "The fields of an output cell except the cell data.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::CellOutput>(r#\"\n {\n   \"capacity\": \"0x2540be400\",\n   \"lock\": {\n     \"code_hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\",\n     \"hash_type\": \"data\",\n     \"args\": \"0x\"\n   },\n   \"type\": null\n }\n # \"#).unwrap();\n```",
        "properties": {
          "capacity": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The cell capacity.\n\nThe capacity of a cell is the value of the cell in Shannons. It is also the upper limit of the cell occupied storage size where every 100,000,000 Shannons give 1-byte storage."
          },
          "lock": {
            "$ref": "#/components/schemas/Script",
            "description": "The lock script."
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Script"
              },
              {
                "type": "null"
              }
            ],
            "description": "The optional type script.\n\nThe JSON field name is \"type\"."
          }
        },
        "required": [
          "capacity",
          "lock"
        ],
        "type": "object"
      },
      "DaoWithdrawingCalculationKind": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/H256",
            "description": "the assumed reference block hash for withdrawing phase 1 transaction"
          },
          {
            "$ref": "#/components/schemas/OutPoint",
            "description": "the out point of the withdrawing phase 1 transaction"
          }
        ],
        "description": "An enum to represent the two kinds of dao withdrawal amount calculation option. `DaoWithdrawingCalculationKind` is equivalent to [`H256`] `|` [`OutPoint`].\n\n[`H256`]: struct.H256.html\n[`OutPoint`]: struct.OutPoint.html"
      },
      "DepType": {
        "description": "The dep cell type. Allowed values: \"code\" and \"dep_group\".",
        "oneOf": [
          {
            "description": "Type \"code\".\n\nUse the cell itself as the dep cell.",
            "enum": [
              "code"
            ],
            "type": "string"
          },
          {
            "description": "Type \"dep_group\".\n\nThe cell is a dep group which members are cells. These members are used as dep cells instead of the group itself.\n\nThe dep group stores the array of `OutPoint`s serialized via molecule in the cell data. Each `OutPoint` points to one cell member.",
            "enum": [
              "dep_group"
            ],
            "type": "string"
          }
        ]
      },
      "EstimateCycles": {
        "description": "Response result of the RPC method `estimate_cycles`.",
        "properties": {
          "cycles": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The count of cycles that the VM has consumed to verify this transaction."
          }
        },
        "required": [
          "cycles"
        ],
        "type": "object"
      },
      "H256": {
        "description": "The 32-byte fixed-length binary data.\n\nThe name comes from the number of bits in the data.\n\nIn JSONRPC, it is encoded as a 0x-prefixed hex string.",
        "items": {
          "format": "uint8",
          "minimum": 0.0,
          "type": "integer"
        },
        "maxItems": 32,
        "minItems": 32,
        "type": "array"
      },
      "JsonBytes": {
        "type": "string"
      },
      "OutPoint": {
        "additionalProperties": false,
        "description": "Reference to a cell via transaction hash and output index.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::OutPoint>(r#\"\n {\n   \"index\": \"0x0\",\n   \"tx_hash\": \"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17\"\n }\n # \"#).unwrap();\n```",
        "properties": {
          "index": {
            "$ref": "#/components/schemas/Uint32",
            "description": "The output index of the cell in the transaction specified by `tx_hash`."
          },
          "tx_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "Transaction hash in which the cell is an output."
          }
        },
        "required": [
          "index",
          "tx_hash"
        ],
        "type": "object"
      },
      "Script": {
        "additionalProperties": false,
        "description": "Describes the lock script and type script for a cell.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::Script>(r#\"\n {\n   \"code_hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\",\n   \"hash_type\": \"data\",\n   \"args\": \"0x\"\n }\n # \"#).unwrap();\n```",
        "properties": {
          "args": {
            "$ref": "#/components/schemas/JsonBytes",
            "description": "Arguments for script."
          },
          "code_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "The hash used to match the script code."
          },
          "hash_type": {
            "$ref": "#/components/schemas/ScriptHashType",
            "description": "Specifies how to use the `code_hash` to match the script code."
          }
        },
        "required": [
          "args",
          "code_hash",
          "hash_type"
        ],
        "type": "object"
      },
      "ScriptHashType": {
        "description": "Specifies how the script `code_hash` is used to match the script code and how to run the code.\n\nAllowed kinds: \"data\", \"type\", \"data1\" and \"data2\"\n\nRefer to the section [Code Locating](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0022-transaction-structure/0022-transaction-structure.md#code-locating) and [Upgradable Script](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0022-transaction-structure/0022-transaction-structure.md#upgradable-script) in the RFC *CKB Transaction Structure*.\n\nThe hash type is split into the high 7 bits and the low 1 bit, when the low 1 bit is 1, it indicates the type, when the low 1 bit is 0, it indicates the data, and then it relies on the high 7 bits to indicate that the data actually corresponds to the version.",
        "oneOf": [
          {
            "description": "Type \"data\" matches script code via cell data hash, and run the script code in v0 CKB VM.",
            "enum": [
              "data"
            ],
            "type": "string"
          },
          {
            "description": "Type \"type\" matches script code via cell type script hash.",
            "enum": [
              "type"
            ],
            "type": "string"
          },
          {
            "description": "Type \"data1\" matches script code via cell data hash, and run the script code in v1 CKB VM.",
            "enum": [
              "data1"
            ],
            "type": "string"
          },
          {
            "description": "Type \"data2\" matches script code via cell data hash, and run the script code in v2 CKB VM.",
            "enum": [
              "data2"
            ],
            "type": "string"
          }
        ]
      },
      "Transaction": {
        "additionalProperties": false,
        "description": "The transaction.\n\nRefer to RFC [CKB Transaction Structure](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0022-transaction-structure/0022-transaction-structure.md).",
        "properties": {
          "cell_deps": {
            "description": "An array of cell deps.\n\nCKB locates lock script and type script code via cell deps. The script also can use syscalls to read the cells here.\n\nUnlike inputs, the live cells can be used as cell deps in multiple transactions.",
            "items": {
              "$ref": "#/components/schemas/CellDep"
            },
            "type": "array"
          },
          "header_deps": {
            "description": "An array of header deps.\n\nThe block must already be in the canonical chain.\n\nLock script and type script can read the header information of blocks listed here.",
            "items": {
              "$ref": "#/components/schemas/H256"
            },
            "type": "array"
          },
          "inputs": {
            "description": "An array of input cells.\n\nIn the canonical chain, any cell can only appear as an input once.",
            "items": {
              "$ref": "#/components/schemas/CellInput"
            },
            "type": "array"
          },
          "outputs": {
            "description": "An array of output cells.",
            "items": {
              "$ref": "#/components/schemas/CellOutput"
            },
            "type": "array"
          },
          "outputs_data": {
            "description": "Output cells data.\n\nThis is a parallel array of outputs. The cell capacity, lock, and type of the output i is `outputs[i]` and its data is `outputs_data[i]`.",
            "items": {
              "$ref": "#/components/schemas/JsonBytes"
            },
            "type": "array"
          },
          "version": {
            "$ref": "#/components/schemas/Uint32",
            "description": "Reserved for future usage. It must equal 0 in current version."
          },
          "witnesses": {
            "description": "An array of variable-length binaries.\n\nLock script and type script can read data here to verify the transaction.\n\nFor example, the bundled secp256k1 lock script requires storing the signature in `witnesses`.",
            "items": {
              "$ref": "#/components/schemas/JsonBytes"
            },
            "type": "array"
          }
        },
        "required": [
          "cell_deps",
          "header_deps",
          "inputs",
          "outputs",
          "outputs_data",
          "version",
          "witnesses"
        ],
        "type": "object"
      },
      "Uint32": {
        "format": "uint32",
        "minimum": 0.0,
        "type": "integer"
      },
      "Uint64": {
        "format": "uint64",
        "minimum": 0.0,
        "type": "integer"
      }
    }
  },
  "info": {
    "description": " RPC Module Experiment for experimenting methods.\n\n **EXPERIMENTAL warning**\n\n The methods here may be removed or changed in future releases without prior notifications.",
    "title": "experiment_rpc",
    "version": "0.115.0-pre"
  },
  "methods": [
    {
      "description": " Dry run a transaction and return the execution cycles.\n\n This method will not check the transaction validity, but only run the lock script\n and type script and then return the execution cycles.\n\n It is used to debug transaction scripts and query how many cycles the scripts consume.\n\n ## Errors\n\n * [`TransactionFailedToResolve (-301)`](../enum.RPCError.html#variant.TransactionFailedToResolve) - Failed to resolve the referenced cells and headers used in the transaction, as inputs or dependencies.\n * [`TransactionFailedToVerify (-302)`](../enum.RPCError.html#variant.TransactionFailedToVerify) - There is a script returns with an error.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"dry_run_transaction\",\n   \"params\": [\n     {\n       \"cell_deps\": [\n         {\n           \"dep_type\": \"code\",\n           \"out_point\": {\n             \"index\": \"0x0\",\n             \"tx_hash\": \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\"\n           }\n         }\n       ],\n       \"header_deps\": [\n         \"0x7978ec7ce5b507cfb52e149e36b1a23f6062ed150503c85bbf825da3599095ed\"\n       ],\n       \"inputs\": [\n         {\n           \"previous_output\": {\n             \"index\": \"0x0\",\n             \"tx_hash\": \"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17\"\n           },\n           \"since\": \"0x0\"\n         }\n       ],\n       \"outputs\": [\n         {\n           \"capacity\": \"0x2540be400\",\n           \"lock\": {\n             \"code_hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\",\n             \"hash_type\": \"data\",\n             \"args\": \"0x\"\n           },\n           \"type\": null\n         }\n       ],\n       \"outputs_data\": [\n         \"0x\"\n       ],\n       \"version\": \"0x0\",\n       \"witnesses\": []\n     }\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"cycles\": \"0x219\"\n   }\n }\n ```",
      "name": "dry_run_transaction",
      "params": [
        {
          "name": "tx",
          "schema": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      ],
      "result": {
        "name": "dry_run_transaction",
        "schema": {
          "$ref": "#/components/schemas/EstimateCycles"
        }
      }
    },
    {
      "description": " Calculates the maximum withdrawal one can get, given a referenced DAO cell, and\n a withdrawing block hash.\n\n ## Params\n\n * `out_point` - Reference to the DAO cell, the depositing transaction's output.\n * `kind` - Two kinds of dao withdrawal amount calculation option.\n\n option 1, the assumed reference block hash for withdrawing phase 1 transaction, this block must be in the\n [canonical chain](trait.ChainRpc.html#canonical-chain), the calculation of occupied capacity will be based on the depositing transaction's output, assuming the output of phase 1 transaction is the same as the depositing transaction's output.\n\n option 2, the out point of the withdrawing phase 1 transaction, the calculation of occupied capacity will be based on corresponding phase 1 transaction's output.\n\n ## Returns\n\n The RPC returns the final capacity when the cell `out_point` is withdrawn using the block hash or withdrawing phase 1 transaction out point as the reference.\n\n In CKB, scripts cannot get the information about in which block the transaction is\n committed. A workaround is letting the transaction reference a block hash so the script\n knows that the transaction is committed at least after the reference block.\n\n ## Errors\n\n * [`DaoError (-5)`](../enum.RPCError.html#variant.DaoError) - The given out point is not a valid cell for DAO computation.\n * [`CKBInternalError (-1)`](../enum.RPCError.html#variant.CKBInternalError) - Mathematics overflow.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"calculate_dao_maximum_withdraw\",\n   \"params\": [\n     {\n       \"index\": \"0x0\",\n       \"tx_hash\": \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\"\n     },\n     \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": \"0x4a8b4e8a4\"\n }\n ```",
      "name": "calculate_dao_maximum_withdraw",
      "params": [
        {
          "name": "out_point",
          "schema": {
            "$ref": "#/components/schemas/OutPoint"
          }
        },
        {
          "name": "kind",
          "schema": {
            "$ref": "#/components/schemas/DaoWithdrawingCalculationKind"
          }
        }
      ],
      "result": {
        "name": "calculate_dao_maximum_withdraw",
        "schema": {
          "$ref": "#/components/schemas/Uint64"
        }
      }
    }
  ],
  "openrpc": "1.2.6"
}