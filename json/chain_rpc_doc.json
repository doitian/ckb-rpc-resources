{
  "components": {
    "schemas": {
      "BlockEconomicState": {
        "description": "Block Economic State.\n\nIt includes the rewards details and when it is finalized.",
        "properties": {
          "finalized_at": {
            "$ref": "#/components/schemas/H256",
            "description": "The block hash of the block which creates the rewards as cells in its cellbase transaction."
          },
          "issuance": {
            "$ref": "#/components/schemas/BlockIssuance",
            "description": "Block base rewards."
          },
          "miner_reward": {
            "$ref": "#/components/schemas/MinerReward",
            "description": "Block rewards for miners."
          },
          "txs_fee": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The total fees of all transactions committed in the block."
          }
        },
        "required": [
          "finalized_at",
          "issuance",
          "miner_reward",
          "txs_fee"
        ],
        "type": "object"
      },
      "BlockFilter": {
        "description": "Block filter data and hash.",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonBytes",
            "description": "The the hex-encoded filter data of the block"
          },
          "hash": {
            "$ref": "#/components/schemas/Byte32",
            "description": "The filter hash, blake2b hash of the parent block filter hash and the filter data, blake2b(parent_block_filter_hash | current_block_filter_data)"
          }
        },
        "required": [
          "data",
          "hash"
        ],
        "type": "object"
      },
      "BlockIssuance": {
        "description": "Block base rewards.",
        "properties": {
          "primary": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The primary base rewards."
          },
          "secondary": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The secondary base rewards."
          }
        },
        "required": [
          "primary",
          "secondary"
        ],
        "type": "object"
      },
      "BlockResponse": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Either_for_BlockView_and_JsonBytes",
            "description": "The block response regular format\n\n[`BlockView`] | [\\`SerializedBlock\\`](#type-serializedblock) - The block structure"
          },
          {
            "$ref": "#/components/schemas/BlockWithCyclesResponse",
            "description": "The block with cycles response format\n\nA JSON object with the following fields:\n* `block`: [`BlockView`] | [\\`SerializedBlock\\`](#type-serializedblock) - The block structure\n* `cycles`: `Array<` [`Cycle`](#type-cycle) `>` `|` `null` - The block transactions consumed cycles."
          }
        ],
        "description": "The wrapper represent response of `get_block` | `get_block_by_number`, return a Block with cycles."
      },
      "BlockView": {
        "description": "The JSON view of a Block including header and body.",
        "properties": {
          "extension": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/JsonBytes"
              },
              {
                "type": "null"
              }
            ],
            "description": "The extension in the block body.\n\nThis is a field introduced in [CKB RFC 0031]. Since the activation of [CKB RFC 0044], this field is at least 32 bytes, and at most 96 bytes. The consensus rule of first 32 bytes is defined in the RFC 0044.\n\n[CKB RFC 0031]: https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0031-variable-length-header-field/0031-variable-length-header-field.md\n[CKB RFC 0044]: https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0044-ckb-light-client/0044-ckb-light-client.md"
          },
          "header": {
            "$ref": "#/components/schemas/HeaderView",
            "description": "The block header."
          },
          "proposals": {
            "description": "The proposal IDs in the block body.",
            "items": {
              "$ref": "#/components/schemas/ProposalShortId"
            },
            "type": "array"
          },
          "transactions": {
            "description": "The transactions in the block body.",
            "items": {
              "$ref": "#/components/schemas/TransactionView"
            },
            "type": "array"
          },
          "uncles": {
            "description": "The uncles blocks in the block body.",
            "items": {
              "$ref": "#/components/schemas/UncleBlockView"
            },
            "type": "array"
          }
        },
        "required": [
          "header",
          "proposals",
          "transactions",
          "uncles"
        ],
        "type": "object"
      },
      "BlockWithCyclesResponse": {
        "description": "BlockResponse with cycles format wrapper",
        "properties": {
          "block": {
            "$ref": "#/components/schemas/Either_for_BlockView_and_JsonBytes",
            "description": "The block structure"
          },
          "cycles": {
            "default": null,
            "description": "The block transactions consumed cycles.",
            "items": {
              "$ref": "#/components/schemas/Uint64"
            },
            "type": [
              "array",
              "null"
            ]
          }
        },
        "required": [
          "block"
        ],
        "type": "object"
      },
      "Buried": {
        "description": "Represent soft fork deployments where the activation epoch is hard-coded into the client implementation",
        "properties": {
          "active": {
            "description": "Whether the rules are active",
            "type": "boolean"
          },
          "epoch": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The first epoch which the rules will be enforced"
          },
          "status": {
            "$ref": "#/components/schemas/SoftForkStatus",
            "description": "SoftFork status"
          }
        },
        "required": [
          "active",
          "epoch",
          "status"
        ],
        "type": "object"
      },
      "Byte32": {
        "items": {
          "format": "uint8",
          "minimum": 0.0,
          "type": "integer"
        },
        "maxItems": 32,
        "minItems": 32,
        "type": "array"
      },
      "CellData": {
        "description": "The cell data content and hash.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::CellData>(r#\"\n {\n   \"content\": \"0x7f454c460201010000000000000000000200f3000100000078000100000000004000000000000000980000000000000005000000400038000100400003000200010000000500000000000000000000000000010000000000000001000000000082000000000000008200000000000000001000000000000001459308d00573000000002e7368737472746162002e74657874000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000010000000600000000000000780001000000000078000000000000000a0000000000000000000000000000000200000000000000000000000000000001000000030000000000000000000000000000000000000082000000000000001100000000000000000000000000000001000000000000000000000000000000\",\n   \"hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\"\n }\n # \"#).unwrap();\n```",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonBytes",
            "description": "Cell content."
          },
          "hash": {
            "$ref": "#/components/schemas/H256",
            "description": "Cell content hash."
          }
        },
        "required": [
          "content",
          "hash"
        ],
        "type": "object"
      },
      "CellDep": {
        "additionalProperties": false,
        "description": "The cell dependency of a transaction.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::CellDep>(r#\"\n {\n   \"dep_type\": \"code\",\n   \"out_point\": {\n     \"index\": \"0x0\",\n     \"tx_hash\": \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\"\n   }\n }\n # \"#).unwrap();\n```",
        "properties": {
          "dep_type": {
            "$ref": "#/components/schemas/DepType",
            "description": "Dependency type."
          },
          "out_point": {
            "$ref": "#/components/schemas/OutPoint",
            "description": "Reference to the cell."
          }
        },
        "required": [
          "dep_type",
          "out_point"
        ],
        "type": "object"
      },
      "CellInfo": {
        "description": "The JSON view of a cell combining the fields in cell output and cell data.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::CellInfo>(r#\"\n {\n   \"data\": {\n     \"content\": \"0x7f454c460201010000000000000000000200f3000100000078000100000000004000000000000000980000000000000005000000400038000100400003000200010000000500000000000000000000000000010000000000000001000000000082000000000000008200000000000000001000000000000001459308d00573000000002e7368737472746162002e74657874000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000010000000600000000000000780001000000000078000000000000000a0000000000000000000000000000000200000000000000000000000000000001000000030000000000000000000000000000000000000082000000000000001100000000000000000000000000000001000000000000000000000000000000\",\n     \"hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\"\n   },\n   \"output\": {\n     \"capacity\": \"0x802665800\",\n     \"lock\": {\n       \"args\": \"0x\",\n       \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n       \"hash_type\": \"data\"\n     },\n     \"type\": null\n   }\n }\n # \"#).unwrap();\n```",
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CellData"
              },
              {
                "type": "null"
              }
            ],
            "description": "Cell data.\n\nThis is `null` when the data is not requested, which does not mean the cell data is empty."
          },
          "output": {
            "$ref": "#/components/schemas/CellOutput",
            "description": "Cell fields appears in the transaction `outputs` array."
          }
        },
        "required": [
          "output"
        ],
        "type": "object"
      },
      "CellInput": {
        "additionalProperties": false,
        "description": "The input cell of a transaction.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::CellInput>(r#\"\n {\n   \"previous_output\": {\n     \"index\": \"0x0\",\n     \"tx_hash\": \"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17\"\n   },\n   \"since\": \"0x0\"\n }\n # \"#).unwrap();\n```",
        "properties": {
          "previous_output": {
            "$ref": "#/components/schemas/OutPoint",
            "description": "Reference to the input cell."
          },
          "since": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Restrict when the transaction can be committed into the chain.\n\nSee the RFC [Transaction valid since](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0017-tx-valid-since/0017-tx-valid-since.md)."
          }
        },
        "required": [
          "previous_output",
          "since"
        ],
        "type": "object"
      },
      "CellOutput": {
        "additionalProperties": false,
        "description": "The fields of an output cell except the cell data.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::CellOutput>(r#\"\n {\n   \"capacity\": \"0x2540be400\",\n   \"lock\": {\n     \"code_hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\",\n     \"hash_type\": \"data\",\n     \"args\": \"0x\"\n   },\n   \"type\": null\n }\n # \"#).unwrap();\n```",
        "properties": {
          "capacity": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The cell capacity.\n\nThe capacity of a cell is the value of the cell in Shannons. It is also the upper limit of the cell occupied storage size where every 100,000,000 Shannons give 1-byte storage."
          },
          "lock": {
            "$ref": "#/components/schemas/Script",
            "description": "The lock script."
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Script"
              },
              {
                "type": "null"
              }
            ],
            "description": "The optional type script.\n\nThe JSON field name is \"type\"."
          }
        },
        "required": [
          "capacity",
          "lock"
        ],
        "type": "object"
      },
      "CellWithStatus": {
        "description": "The JSON view of a cell with its status information.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::CellWithStatus>(r#\"\n {\n   \"cell\": {\n     \"data\": {\n       \"content\": \"0x7f454c460201010000000000000000000200f3000100000078000100000000004000000000000000980000000000000005000000400038000100400003000200010000000500000000000000000000000000010000000000000001000000000082000000000000008200000000000000001000000000000001459308d00573000000002e7368737472746162002e74657874000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000010000000600000000000000780001000000000078000000000000000a0000000000000000000000000000000200000000000000000000000000000001000000030000000000000000000000000000000000000082000000000000001100000000000000000000000000000001000000000000000000000000000000\",\n       \"hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\"\n     },\n     \"output\": {\n       \"capacity\": \"0x802665800\",\n       \"lock\": {\n         \"args\": \"0x\",\n         \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n         \"hash_type\": \"data\"\n       },\n       \"type\": null\n     }\n   },\n   \"status\": \"live\"\n }\n # \"#).unwrap();\n```\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::CellWithStatus>(r#\"\n {\n   \"cell\": null,\n   \"status\": \"unknown\"\n }\n # \"#).unwrap();\n```",
        "properties": {
          "cell": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CellInfo"
              },
              {
                "type": "null"
              }
            ],
            "description": "The cell information.\n\nFor performance issues, CKB only keeps the information for live cells."
          },
          "status": {
            "description": "Status of the cell.\n\nAllowed values: \"live\", \"dead\", \"unknown\".\n\n* `live` - The transaction creating this cell is in the chain, and there are no transactions found in the chain that uses this cell as an input.\n* `dead` - (**Deprecated**: the dead status will be removed since 0.36.0, please do not rely on the logic that differentiates dead and unknown cells.) The transaction creating this cell is in the chain, and a transaction is found in the chain which uses this cell as an input.\n* `unknown` - CKB does not know the status of the cell. Either the transaction creating this cell is not in the chain yet, or it is no longer live.",
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "Consensus": {
        "description": "Consensus defines various parameters that influence chain consensus",
        "properties": {
          "block_version": {
            "$ref": "#/components/schemas/Uint32",
            "description": "The block version number supported"
          },
          "cellbase_maturity": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The Cellbase maturity"
          },
          "dao_type_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "The dao type hash"
          },
          "epoch_duration_target": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The expected epoch_duration"
          },
          "genesis_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "The genesis block hash"
          },
          "hardfork_features": {
            "description": "Hardfork features",
            "items": {
              "$ref": "#/components/schemas/HardForkFeature"
            },
            "type": "array"
          },
          "id": {
            "description": "Names the network.",
            "type": "string"
          },
          "initial_primary_epoch_reward": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The initial primary_epoch_reward"
          },
          "max_block_bytes": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Maximum number of bytes to use for the entire block"
          },
          "max_block_cycles": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Maximum cycles that all the scripts in all the commit transactions can take"
          },
          "max_block_proposals_limit": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The Limit to the number of proposals per block"
          },
          "max_uncles_num": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The maximum amount of uncles allowed for a block"
          },
          "median_time_block_count": {
            "$ref": "#/components/schemas/Uint64",
            "description": "This parameter indicates the count of past blocks used in the median time calculation"
          },
          "orphan_rate_target": {
            "description": "The expected orphan_rate",
            "format": "rational_u256",
            "type": "string"
          },
          "permanent_difficulty_in_dummy": {
            "description": "Keep difficulty be permanent if the pow is dummy",
            "type": "boolean"
          },
          "primary_epoch_reward_halving_interval": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Primary reward is cut in half every halving_interval epoch"
          },
          "proposer_reward_ratio": {
            "description": "The two-step-transaction-confirmation proposer reward ratio",
            "format": "rational_u256",
            "type": "string"
          },
          "secondary_epoch_reward": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The secondary primary_epoch_reward"
          },
          "secp256k1_blake160_multisig_all_type_hash": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/H256"
              },
              {
                "type": "null"
              }
            ],
            "description": "The secp256k1_blake160_multisig_all_type_hash"
          },
          "secp256k1_blake160_sighash_all_type_hash": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/H256"
              },
              {
                "type": "null"
              }
            ],
            "description": "The secp256k1_blake160_sighash_all_type_hash"
          },
          "softforks": {
            "additionalProperties": {
              "$ref": "#/components/schemas/SoftFork"
            },
            "description": "`HashMap<DeploymentPos, SoftFork>` - Softforks",
            "type": "object"
          },
          "tx_proposal_window": {
            "$ref": "#/components/schemas/ProposalWindow",
            "description": "The two-step-transaction-confirmation proposal window"
          },
          "tx_version": {
            "$ref": "#/components/schemas/Uint32",
            "description": "The tx version number supported"
          },
          "type_id_code_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "The \"TYPE_ID\" in hex"
          }
        },
        "required": [
          "block_version",
          "cellbase_maturity",
          "dao_type_hash",
          "epoch_duration_target",
          "genesis_hash",
          "hardfork_features",
          "id",
          "initial_primary_epoch_reward",
          "max_block_bytes",
          "max_block_cycles",
          "max_block_proposals_limit",
          "max_uncles_num",
          "median_time_block_count",
          "orphan_rate_target",
          "permanent_difficulty_in_dummy",
          "primary_epoch_reward_halving_interval",
          "proposer_reward_ratio",
          "secondary_epoch_reward",
          "softforks",
          "tx_proposal_window",
          "tx_version",
          "type_id_code_hash"
        ],
        "type": "object"
      },
      "DepType": {
        "description": "The dep cell type. Allowed values: \"code\" and \"dep_group\".",
        "oneOf": [
          {
            "description": "Type \"code\".\n\nUse the cell itself as the dep cell.",
            "enum": [
              "code"
            ],
            "type": "string"
          },
          {
            "description": "Type \"dep_group\".\n\nThe cell is a dep group which members are cells. These members are used as dep cells instead of the group itself.\n\nThe dep group stores the array of `OutPoint`s serialized via molecule in the cell data. Each `OutPoint` points to one cell member.",
            "enum": [
              "dep_group"
            ],
            "type": "string"
          }
        ]
      },
      "Deployment": {
        "description": "RFC0043 deployment params",
        "properties": {
          "bit": {
            "description": "Determines which bit in the `version` field of the block is to be used to signal the softfork lock-in and activation. It is chosen from the set {0,1,2,...,28}.",
            "format": "uint8",
            "minimum": 0.0,
            "type": "integer"
          },
          "min_activation_epoch": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Specifies the epoch at which the softfork is allowed to become active."
          },
          "period": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Specifies length of epochs of the signalling period."
          },
          "start": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Specifies the first epoch in which the bit gains meaning."
          },
          "threshold": {
            "$ref": "#/components/schemas/Ratio",
            "description": "Specifies the minimum ratio of block per `period`, which indicate the locked_in of the softfork during the `period`."
          },
          "timeout": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Specifies an epoch at which the miner signaling ends. Once this epoch has been reached, if the softfork has not yet locked_in (excluding this epoch block's bit state), the deployment is considered failed on all descendants of the block."
          }
        },
        "required": [
          "bit",
          "min_activation_epoch",
          "period",
          "start",
          "threshold",
          "timeout"
        ],
        "type": "object"
      },
      "Either_for_BlockView_and_JsonBytes": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/BlockView",
            "description": "A value of type `L`."
          },
          {
            "$ref": "#/components/schemas/JsonBytes",
            "description": "A value of type `R`."
          }
        ],
        "description": "The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases."
      },
      "Either_for_HeaderView_and_JsonBytes": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/HeaderView",
            "description": "A value of type `L`."
          },
          {
            "$ref": "#/components/schemas/JsonBytes",
            "description": "A value of type `R`."
          }
        ],
        "description": "The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases."
      },
      "Either_for_TransactionView_and_JsonBytes": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/TransactionView",
            "description": "A value of type `L`."
          },
          {
            "$ref": "#/components/schemas/JsonBytes",
            "description": "A value of type `R`."
          }
        ],
        "description": "The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases."
      },
      "EpochView": {
        "description": "JSON view of an epoch.\n\nCKB adjusts difficulty based on epochs.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::EpochView>(r#\"\n {\n   \"compact_target\": \"0x1e083126\",\n   \"length\": \"0x708\",\n   \"number\": \"0x1\",\n   \"start_number\": \"0x3e8\"\n }\n # \"#).unwrap();\n```",
        "properties": {
          "compact_target": {
            "$ref": "#/components/schemas/Uint32",
            "description": "The difficulty target for any block in this epoch."
          },
          "length": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The number of blocks in this epoch."
          },
          "number": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Consecutive epoch number starting from 0."
          },
          "start_number": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The block number of the first block in the epoch.\n\nIt also equals the total count of blocks in all the epochs which epoch number is less than this epoch."
          }
        },
        "required": [
          "compact_target",
          "length",
          "number",
          "start_number"
        ],
        "type": "object"
      },
      "EstimateCycles": {
        "description": "Response result of the RPC method `estimate_cycles`.",
        "properties": {
          "cycles": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The count of cycles that the VM has consumed to verify this transaction."
          }
        },
        "required": [
          "cycles"
        ],
        "type": "object"
      },
      "FeeRateStatistics": {
        "description": "The fee_rate statistics information, includes mean and median, unit: shannons per kilo-weight",
        "properties": {
          "mean": {
            "$ref": "#/components/schemas/Uint64",
            "description": "mean"
          },
          "median": {
            "$ref": "#/components/schemas/Uint64",
            "description": "median"
          }
        },
        "required": [
          "mean",
          "median"
        ],
        "type": "object"
      },
      "H256": {
        "description": "The 32-byte fixed-length binary data.\n\nThe name comes from the number of bits in the data.\n\nIn JSONRPC, it is encoded as a 0x-prefixed hex string.",
        "items": {
          "format": "uint8",
          "minimum": 0.0,
          "type": "integer"
        },
        "maxItems": 32,
        "minItems": 32,
        "type": "array"
      },
      "HardForkFeature": {
        "description": "The information about one hardfork feature.",
        "properties": {
          "epoch_number": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint64"
              },
              {
                "type": "null"
              }
            ],
            "description": "The first epoch when the feature is enabled, `null` indicates that the RFC has never been enabled."
          },
          "rfc": {
            "description": "The related RFC ID.",
            "type": "string"
          }
        },
        "required": [
          "rfc"
        ],
        "type": "object"
      },
      "HeaderView": {
        "description": "The JSON view of a Header.\n\nThis structure is serialized into a JSON object with field `hash` and all the fields in\n[`Header`](struct.Header.html).\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::HeaderView>(r#\"\n {\n   \"compact_target\": \"0x1e083126\",\n   \"dao\": \"0xb5a3e047474401001bc476b9ee573000c0c387962a38000000febffacf030000\",\n   \"epoch\": \"0x7080018000001\",\n   \"hash\": \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\",\n   \"nonce\": \"0x0\",\n   \"number\": \"0x400\",\n   \"parent_hash\": \"0xae003585fa15309b30b31aed3dcf385e9472c3c3e93746a6c4540629a6a1ed2d\",\n   \"proposals_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n   \"timestamp\": \"0x5cd2b117\",\n   \"transactions_root\": \"0xc47d5b78b3c4c4c853e2a32810818940d0ee403423bea9ec7b8e566d9595206c\",\n   \"extra_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n   \"version\": \"0x0\"\n }\n # \"#).unwrap();\n```",
        "properties": {
          "compact_target": {
            "$ref": "#/components/schemas/Uint32",
            "description": "The block difficulty target.\n\nIt can be converted to a 256-bit target. Miners must ensure the Eaglesong of the header is within the target."
          },
          "dao": {
            "$ref": "#/components/schemas/Byte32",
            "description": "DAO fields.\n\nSee RFC [Deposit and Withdraw in Nervos DAO](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0023-dao-deposit-withdraw/0023-dao-deposit-withdraw.md#calculation)."
          },
          "epoch": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The epoch information of this block.\n\nSee `EpochNumberWithFraction` for details."
          },
          "extra_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "The hash on `uncles` and extension in the block body.\n\nThe uncles hash is all zeros when `uncles` is empty, or the hash on all the uncle header hashes concatenated together. The extension hash is the hash of the extension. The extra hash is the hash on uncles hash and extension hash concatenated together.\n\n**Notice**\n\nThis field is renamed from `uncles_hash` since 0.100.0. More details can be found in [CKB RFC 0031].\n\n[CKB RFC 0031]: https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0031-variable-length-header-field/0031-variable-length-header-field.md"
          },
          "hash": {
            "$ref": "#/components/schemas/H256",
            "description": "The header hash. It is also called the block hash."
          },
          "nonce": {
            "$ref": "#/components/schemas/Uint128",
            "description": "Miner can modify this field to find a proper value such that the Eaglesong of the header is within the target encoded from `compact_target`."
          },
          "number": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The consecutive block number starting from 0."
          },
          "parent_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "The header hash of the parent block."
          },
          "proposals_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "The hash on `proposals` in the block body.\n\nIt is all zeros when `proposals` is empty, or the hash on all the bytes concatenated together."
          },
          "timestamp": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The block timestamp.\n\nIt is a Unix timestamp in milliseconds (1 second = 1000 milliseconds).\n\nMiners should put the time when the block is created in the header, however, the precision is not guaranteed. A block with a higher block number may even have a smaller timestamp."
          },
          "transactions_root": {
            "$ref": "#/components/schemas/H256",
            "description": "The commitment to all the transactions in the block.\n\nIt is a hash on two Merkle Tree roots:\n\n* The root of a CKB Merkle Tree, which items are the transaction hashes of all the transactions in the block.\n* The root of a CKB Merkle Tree, but the items are the transaction witness hashes of all the transactions in the block."
          },
          "version": {
            "$ref": "#/components/schemas/Uint32",
            "description": "The block version.\n\nIt must equal to 0 now and is reserved for future upgrades."
          }
        },
        "required": [
          "compact_target",
          "dao",
          "epoch",
          "extra_hash",
          "hash",
          "nonce",
          "number",
          "parent_hash",
          "proposals_hash",
          "timestamp",
          "transactions_root",
          "version"
        ],
        "type": "object"
      },
      "JsonBytes": {
        "type": "string"
      },
      "MerkleProof": {
        "description": "Proof of CKB Merkle Tree.\n\nCKB Merkle Tree is a [CBMT](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0006-merkle-tree/0006-merkle-tree.md) using CKB blake2b hash as the merge function.",
        "properties": {
          "indices": {
            "description": "Leaves indices in the CBMT that are proved present in the block.\n\nThese are indices in the CBMT tree not the transaction indices in the block.",
            "items": {
              "$ref": "#/components/schemas/Uint32"
            },
            "type": "array"
          },
          "lemmas": {
            "description": "Hashes of all siblings along the paths to root.",
            "items": {
              "$ref": "#/components/schemas/H256"
            },
            "type": "array"
          }
        },
        "required": [
          "indices",
          "lemmas"
        ],
        "type": "object"
      },
      "MinerReward": {
        "description": "Block rewards for miners.",
        "properties": {
          "committed": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The transaction fees that are rewarded to miners because the transaction is committed in the block.\n\nMiners get 60% of the transaction fee for each transaction committed in the block."
          },
          "primary": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The primary base block reward allocated to miners."
          },
          "proposal": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The transaction fees that are rewarded to miners because the transaction is proposed in the block or its uncles.\n\nMiners get 40% of the transaction fee for each transaction proposed in the block and committed later in its active commit window."
          },
          "secondary": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The secondary base block reward allocated to miners."
          }
        },
        "required": [
          "committed",
          "primary",
          "proposal",
          "secondary"
        ],
        "type": "object"
      },
      "OutPoint": {
        "additionalProperties": false,
        "description": "Reference to a cell via transaction hash and output index.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::OutPoint>(r#\"\n {\n   \"index\": \"0x0\",\n   \"tx_hash\": \"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17\"\n }\n # \"#).unwrap();\n```",
        "properties": {
          "index": {
            "$ref": "#/components/schemas/Uint32",
            "description": "The output index of the cell in the transaction specified by `tx_hash`."
          },
          "tx_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "Transaction hash in which the cell is an output."
          }
        },
        "required": [
          "index",
          "tx_hash"
        ],
        "type": "object"
      },
      "ProposalShortId": {
        "description": "The 10-byte fixed-length binary encoded as a 0x-prefixed hex string in JSON.\n\n## Example\n\n```text\n 0xa0ef4eb5f4ceeb08a4c8\n```",
        "items": {
          "format": "uint8",
          "minimum": 0.0,
          "type": "integer"
        },
        "maxItems": 10,
        "minItems": 10,
        "type": "array"
      },
      "ProposalWindow": {
        "description": "Two protocol parameters `closest` and `farthest` define the closest and farthest on-chain distance between a transaction's proposal and commitment.\n\nA non-cellbase transaction is committed at height h_c if all of the following conditions are met:\n1) it is proposed at height h_p of the same chain, where w_close <= h_c − h_p <= w_far ;\n2) it is in the commitment zone of the main chain block with height h_c ;\n\n```text\n   ProposalWindow { closest: 2, farthest: 10 }\n       propose\n          \\\n           \\\n           13 14 [15 16 17 18 19 20 21 22 23]\n                  \\_______________________/\n                               \\\n                             commit\n```",
        "properties": {
          "closest": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The closest distance between the proposal and the commitment."
          },
          "farthest": {
            "$ref": "#/components/schemas/Uint64",
            "description": "The farthest distance between the proposal and the commitment."
          }
        },
        "required": [
          "closest",
          "farthest"
        ],
        "type": "object"
      },
      "Ratio": {
        "description": "Represents the ratio `numerator / denominator`, where `numerator` and `denominator` are both unsigned 64-bit integers.",
        "properties": {
          "denom": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Denominator."
          },
          "numer": {
            "$ref": "#/components/schemas/Uint64",
            "description": "Numerator."
          }
        },
        "required": [
          "denom",
          "numer"
        ],
        "type": "object"
      },
      "Rfc0043": {
        "description": "Represent soft fork deployments where activation is controlled by rfc0043 signaling",
        "properties": {
          "rfc0043": {
            "$ref": "#/components/schemas/Deployment",
            "description": "RFC0043 deployment params"
          },
          "status": {
            "$ref": "#/components/schemas/SoftForkStatus",
            "description": "SoftFork status"
          }
        },
        "required": [
          "rfc0043",
          "status"
        ],
        "type": "object"
      },
      "Script": {
        "additionalProperties": false,
        "description": "Describes the lock script and type script for a cell.\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::Script>(r#\"\n {\n   \"code_hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\",\n   \"hash_type\": \"data\",\n   \"args\": \"0x\"\n }\n # \"#).unwrap();\n```",
        "properties": {
          "args": {
            "$ref": "#/components/schemas/JsonBytes",
            "description": "Arguments for script."
          },
          "code_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "The hash used to match the script code."
          },
          "hash_type": {
            "$ref": "#/components/schemas/ScriptHashType",
            "description": "Specifies how to use the `code_hash` to match the script code."
          }
        },
        "required": [
          "args",
          "code_hash",
          "hash_type"
        ],
        "type": "object"
      },
      "ScriptHashType": {
        "description": "Specifies how the script `code_hash` is used to match the script code and how to run the code.\n\nAllowed kinds: \"data\", \"type\", \"data1\" and \"data2\"\n\nRefer to the section [Code Locating](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0022-transaction-structure/0022-transaction-structure.md#code-locating) and [Upgradable Script](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0022-transaction-structure/0022-transaction-structure.md#upgradable-script) in the RFC *CKB Transaction Structure*.\n\nThe hash type is split into the high 7 bits and the low 1 bit, when the low 1 bit is 1, it indicates the type, when the low 1 bit is 0, it indicates the data, and then it relies on the high 7 bits to indicate that the data actually corresponds to the version.",
        "oneOf": [
          {
            "description": "Type \"data\" matches script code via cell data hash, and run the script code in v0 CKB VM.",
            "enum": [
              "data"
            ],
            "type": "string"
          },
          {
            "description": "Type \"type\" matches script code via cell type script hash.",
            "enum": [
              "type"
            ],
            "type": "string"
          },
          {
            "description": "Type \"data1\" matches script code via cell data hash, and run the script code in v1 CKB VM.",
            "enum": [
              "data1"
            ],
            "type": "string"
          },
          {
            "description": "Type \"data2\" matches script code via cell data hash, and run the script code in v2 CKB VM.",
            "enum": [
              "data2"
            ],
            "type": "string"
          }
        ]
      },
      "SoftFork": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Buried",
            "description": "buried - the activation epoch is hard-coded into the client implementation"
          },
          {
            "$ref": "#/components/schemas/Rfc0043",
            "description": "rfc0043 - the activation is controlled by rfc0043 signaling"
          }
        ],
        "description": "SoftFork information"
      },
      "SoftForkStatus": {
        "description": "SoftForkStatus which is either `buried` (for soft fork deployments where the activation epoch is hard-coded into the client implementation), or `rfc0043` (for soft fork deployments where activation is controlled by rfc0043 signaling).",
        "oneOf": [
          {
            "description": "the activation epoch is hard-coded into the client implementation",
            "enum": [
              "buried"
            ],
            "type": "string"
          },
          {
            "description": "the activation is controlled by rfc0043 signaling",
            "enum": [
              "rfc0043"
            ],
            "type": "string"
          }
        ]
      },
      "Status": {
        "description": "Status for transaction",
        "oneOf": [
          {
            "description": "Status \"pending\". The transaction is in the pool, and not proposed yet.",
            "enum": [
              "pending"
            ],
            "type": "string"
          },
          {
            "description": "Status \"proposed\". The transaction is in the pool and has been proposed.",
            "enum": [
              "proposed"
            ],
            "type": "string"
          },
          {
            "description": "Status \"committed\". The transaction has been committed to the canonical chain.",
            "enum": [
              "committed"
            ],
            "type": "string"
          },
          {
            "description": "Status \"unknown\". The node has not seen the transaction, or it should be rejected but was cleared due to storage limitations.",
            "enum": [
              "unknown"
            ],
            "type": "string"
          },
          {
            "description": "Status \"rejected\". The transaction has been recently removed from the pool. Due to storage limitations, the node can only hold the most recently removed transactions.",
            "enum": [
              "rejected"
            ],
            "type": "string"
          }
        ]
      },
      "Transaction": {
        "additionalProperties": false,
        "description": "The transaction.\n\nRefer to RFC [CKB Transaction Structure](https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0022-transaction-structure/0022-transaction-structure.md).",
        "properties": {
          "cell_deps": {
            "description": "An array of cell deps.\n\nCKB locates lock script and type script code via cell deps. The script also can use syscalls to read the cells here.\n\nUnlike inputs, the live cells can be used as cell deps in multiple transactions.",
            "items": {
              "$ref": "#/components/schemas/CellDep"
            },
            "type": "array"
          },
          "header_deps": {
            "description": "An array of header deps.\n\nThe block must already be in the canonical chain.\n\nLock script and type script can read the header information of blocks listed here.",
            "items": {
              "$ref": "#/components/schemas/H256"
            },
            "type": "array"
          },
          "inputs": {
            "description": "An array of input cells.\n\nIn the canonical chain, any cell can only appear as an input once.",
            "items": {
              "$ref": "#/components/schemas/CellInput"
            },
            "type": "array"
          },
          "outputs": {
            "description": "An array of output cells.",
            "items": {
              "$ref": "#/components/schemas/CellOutput"
            },
            "type": "array"
          },
          "outputs_data": {
            "description": "Output cells data.\n\nThis is a parallel array of outputs. The cell capacity, lock, and type of the output i is `outputs[i]` and its data is `outputs_data[i]`.",
            "items": {
              "$ref": "#/components/schemas/JsonBytes"
            },
            "type": "array"
          },
          "version": {
            "$ref": "#/components/schemas/Uint32",
            "description": "Reserved for future usage. It must equal 0 in current version."
          },
          "witnesses": {
            "description": "An array of variable-length binaries.\n\nLock script and type script can read data here to verify the transaction.\n\nFor example, the bundled secp256k1 lock script requires storing the signature in `witnesses`.",
            "items": {
              "$ref": "#/components/schemas/JsonBytes"
            },
            "type": "array"
          }
        },
        "required": [
          "cell_deps",
          "header_deps",
          "inputs",
          "outputs",
          "outputs_data",
          "version",
          "witnesses"
        ],
        "type": "object"
      },
      "TransactionAndWitnessProof": {
        "description": "Merkle proof for transactions' witnesses in a block.",
        "properties": {
          "block_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "Block hash"
          },
          "transactions_proof": {
            "$ref": "#/components/schemas/MerkleProof",
            "description": "Merkle proof of all transactions' hash"
          },
          "witnesses_proof": {
            "$ref": "#/components/schemas/MerkleProof",
            "description": "Merkle proof of transactions' witnesses"
          }
        },
        "required": [
          "block_hash",
          "transactions_proof",
          "witnesses_proof"
        ],
        "type": "object"
      },
      "TransactionProof": {
        "description": "Merkle proof for transactions in a block.",
        "properties": {
          "block_hash": {
            "$ref": "#/components/schemas/H256",
            "description": "Block hash"
          },
          "proof": {
            "$ref": "#/components/schemas/MerkleProof",
            "description": "Merkle proof of all transactions' hash"
          },
          "witnesses_root": {
            "$ref": "#/components/schemas/H256",
            "description": "Merkle root of all transactions' witness hash"
          }
        },
        "required": [
          "block_hash",
          "proof",
          "witnesses_root"
        ],
        "type": "object"
      },
      "TransactionView": {
        "description": "The JSON view of a Transaction.\n\nThis structure is serialized into a JSON object with field `hash` and all the fields in\n[`Transaction`](struct.Transaction.html).\n\n## Examples\n\n```\n # serde_json::from_str::<ckb_jsonrpc_types::TransactionView>(r#\"\n {\n   \"cell_deps\": [\n     {\n       \"dep_type\": \"code\",\n       \"out_point\": {\n         \"index\": \"0x0\",\n         \"tx_hash\": \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\"\n       }\n     }\n   ],\n   \"hash\": \"0xa0ef4eb5f4ceeb08a4c8524d84c5da95dce2f608e0ca2ec8091191b0f330c6e3\",\n   \"header_deps\": [\n     \"0x7978ec7ce5b507cfb52e149e36b1a23f6062ed150503c85bbf825da3599095ed\"\n   ],\n   \"inputs\": [\n     {\n       \"previous_output\": {\n         \"index\": \"0x0\",\n         \"tx_hash\": \"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17\"\n       },\n       \"since\": \"0x0\"\n     }\n   ],\n   \"outputs\": [\n     {\n       \"capacity\": \"0x2540be400\",\n       \"lock\": {\n         \"code_hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\",\n         \"hash_type\": \"data\",\n         \"args\": \"0x\"\n       },\n       \"type\": null\n     }\n   ],\n   \"outputs_data\": [\n     \"0x\"\n   ],\n   \"version\": \"0x0\",\n   \"witnesses\": []\n }\n # \"#).unwrap();\n```",
        "properties": {
          "cell_deps": {
            "description": "An array of cell deps.\n\nCKB locates lock script and type script code via cell deps. The script also can use syscalls to read the cells here.\n\nUnlike inputs, the live cells can be used as cell deps in multiple transactions.",
            "items": {
              "$ref": "#/components/schemas/CellDep"
            },
            "type": "array"
          },
          "hash": {
            "$ref": "#/components/schemas/H256",
            "description": "The transaction hash."
          },
          "header_deps": {
            "description": "An array of header deps.\n\nThe block must already be in the canonical chain.\n\nLock script and type script can read the header information of blocks listed here.",
            "items": {
              "$ref": "#/components/schemas/H256"
            },
            "type": "array"
          },
          "inputs": {
            "description": "An array of input cells.\n\nIn the canonical chain, any cell can only appear as an input once.",
            "items": {
              "$ref": "#/components/schemas/CellInput"
            },
            "type": "array"
          },
          "outputs": {
            "description": "An array of output cells.",
            "items": {
              "$ref": "#/components/schemas/CellOutput"
            },
            "type": "array"
          },
          "outputs_data": {
            "description": "Output cells data.\n\nThis is a parallel array of outputs. The cell capacity, lock, and type of the output i is `outputs[i]` and its data is `outputs_data[i]`.",
            "items": {
              "$ref": "#/components/schemas/JsonBytes"
            },
            "type": "array"
          },
          "version": {
            "$ref": "#/components/schemas/Uint32",
            "description": "Reserved for future usage. It must equal 0 in current version."
          },
          "witnesses": {
            "description": "An array of variable-length binaries.\n\nLock script and type script can read data here to verify the transaction.\n\nFor example, the bundled secp256k1 lock script requires storing the signature in `witnesses`.",
            "items": {
              "$ref": "#/components/schemas/JsonBytes"
            },
            "type": "array"
          }
        },
        "required": [
          "cell_deps",
          "hash",
          "header_deps",
          "inputs",
          "outputs",
          "outputs_data",
          "version",
          "witnesses"
        ],
        "type": "object"
      },
      "TransactionWithStatusResponse": {
        "description": "The JSON view of a transaction as well as its status.",
        "properties": {
          "cycles": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint64"
              },
              {
                "type": "null"
              }
            ],
            "description": "The transaction consumed cycles."
          },
          "fee": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint64"
              },
              {
                "type": "null"
              }
            ],
            "description": "The transaction fee of the transaction"
          },
          "min_replace_fee": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint64"
              },
              {
                "type": "null"
              }
            ],
            "description": "The minimal fee required to replace this transaction"
          },
          "time_added_to_pool": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint64"
              },
              {
                "type": "null"
              }
            ],
            "description": "If the transaction is in tx-pool, `time_added_to_pool` represent when it enters the tx-pool. unit: Millisecond"
          },
          "transaction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Either_for_TransactionView_and_JsonBytes"
              },
              {
                "type": "null"
              }
            ],
            "description": "The transaction."
          },
          "tx_status": {
            "$ref": "#/components/schemas/TxStatus",
            "description": "The Transaction status."
          }
        },
        "required": [
          "tx_status"
        ],
        "type": "object"
      },
      "TxStatus": {
        "description": "Transaction status and the block hash if it is committed.",
        "properties": {
          "block_hash": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/H256"
              },
              {
                "type": "null"
              }
            ],
            "description": "The block hash of the block which has committed this transaction in the canonical chain."
          },
          "block_number": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint64"
              },
              {
                "type": "null"
              }
            ],
            "description": "The block number of the block which has committed this transaction in the canonical chain."
          },
          "reason": {
            "description": "The reason why the transaction is rejected",
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/Status",
            "description": "The transaction status, allowed values: \"pending\", \"proposed\" \"committed\" \"unknown\" and \"rejected\"."
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "Uint128": {
        "format": "uint128",
        "minimum": 0.0,
        "type": "integer"
      },
      "Uint32": {
        "format": "uint32",
        "minimum": 0.0,
        "type": "integer"
      },
      "Uint64": {
        "format": "uint64",
        "minimum": 0.0,
        "type": "integer"
      },
      "UncleBlockView": {
        "description": "The uncle block.\n\nThe chain stores only the uncle block header and proposal IDs. The header ensures the block is covered by PoW and can pass the consensus rules on uncle blocks. Proposal IDs are there because a block can commit transactions proposed in an uncle.\n\nA block B1 is considered to be the uncle of another block B2 if all the following conditions are met:\n\n1. They are in the same epoch, sharing the same difficulty;\n2. B2 block number is larger than B1;\n3. B1's parent is either B2's ancestor or an uncle embedded in B2 or any of B2's ancestors.\n4. B2 is the first block in its chain to refer to B1.",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/HeaderView",
            "description": "The uncle block header."
          },
          "proposals": {
            "description": "Proposal IDs in the uncle block body.",
            "items": {
              "$ref": "#/components/schemas/ProposalShortId"
            },
            "type": "array"
          }
        },
        "required": [
          "header",
          "proposals"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "description": " RPC Module Chain for methods related to the canonical chain.\n\n This module queries information about the canonical chain.\n\n ## Canonical Chain\n\n A canonical chain is the one with the most accumulated work. The accumulated work is\n the sum of difficulties of all the blocks in the chain.\n\n ## Chain Reorganization\n\n Chain Reorganization happens when CKB found a chain that has accumulated more work than the\n canonical chain. The reorganization revert the blocks in the current canonical chain if needed,\n and switch the canonical chain to that better chain.\n\n ## Live Cell\n\n A cell is live if\n\n * it is found as an output in any transaction in the [canonical chain](#canonical-chain),\n and\n * it is not found as an input in any transaction in the canonical chain.",
    "title": "chain_rpc",
    "version": "0.115.0-pre"
  },
  "methods": [
    {
      "description": " Returns the information about a block by hash.\n\n ## Params\n\n * `block_hash` - the block hash.\n * `verbosity` - result format which allows 0 and 2. (**Optional**, the default is 2.)\n * `with_cycles` - whether the return cycles of block transactions. (**Optional**, default false.)\n\n ## Returns\n\n The RPC returns a block or null. When the RPC returns a block, the block hash must equal to\n the parameter `block_hash`.\n\n If the block is in the [canonical chain](#canonical-chain), the RPC must return the block\n information. Otherwise, the behavior is undefined. The RPC may return blocks found in local\n storage or simply returns null for all blocks that are not in the canonical chain. And\n because of [chain reorganization](#chain-reorganization), for the same `block_hash`, the\n RPC may sometimes return null and sometimes return the block.\n\n When `verbosity` is 2, it returns a JSON object as the `result`. See `BlockView` for the\n schema.\n\n When `verbosity` is 0, it returns a 0x-prefixed hex string as the `result`. The string\n encodes the block serialized by molecule using schema `table Block`.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_block\",\n   \"params\": [\n      \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"header\": {\n       \"compact_target\": \"0x1e083126\",\n       \"dao\": \"0xb5a3e047474401001bc476b9ee573000c0c387962a38000000febffacf030000\",\n       \"epoch\": \"0x7080018000001\",\n       \"extra_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n       \"hash\": \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\",\n       \"nonce\": \"0x0\",\n       \"number\": \"0x400\",\n       \"parent_hash\": \"0xae003585fa15309b30b31aed3dcf385e9472c3c3e93746a6c4540629a6a1ed2d\",\n       \"proposals_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n       \"timestamp\": \"0x5cd2b117\",\n       \"transactions_root\": \"0xc47d5b78b3c4c4c853e2a32810818940d0ee403423bea9ec7b8e566d9595206c\",\n       \"version\": \"0x0\"\n     },\n     \"proposals\": [],\n     \"transactions\": [\n       {\n         \"cell_deps\": [],\n         \"hash\": \"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17\",\n         \"header_deps\": [],\n         \"inputs\": [\n           {\n             \"previous_output\": {\n               \"index\": \"0xffffffff\",\n               \"tx_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n             },\n             \"since\": \"0x400\"\n           }\n         ],\n         \"outputs\": [\n           {\n             \"capacity\": \"0x18e64b61cf\",\n             \"lock\": {\n               \"code_hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\",\n               \"hash_type\": \"data\",\n               \"args\": \"0x\"\n             },\n             \"type\": null\n           }\n         ],\n         \"outputs_data\": [\n           \"0x\"\n         ],\n         \"version\": \"0x0\",\n         \"witnesses\": [\n           \"0x450000000c000000410000003500000010000000300000003100000028e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5000000000000000000\"\n         ]\n       }\n     ],\n     \"uncles\": []\n   }\n }\n ```\n\n The response looks like below when `verbosity` is 0.\n\n ```text\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": \"0x...\"\n }\n ```\n\n When specifying with_cycles, the response object will be different like below:\n\n ```text\n {\n     \"id\": 42,\n     \"jsonrpc\": \"2.0\",\n     \"result\": {\n         \"block\": <Object> or \"0x...\",\n         \"cycles\": []\n     }\n }\n ```",
      "name": "get_block",
      "params": [
        {
          "name": "block_hash",
          "schema": {
            "$ref": "#/components/schemas/H256"
          }
        },
        {
          "name": "verbosity",
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint32"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        {
          "name": "with_cycles",
          "schema": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      ],
      "result": {
        "name": "get_block",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/BlockResponse"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": " Returns the block in the [canonical chain](#canonical-chain) with the specific block number.\n\n ## Params\n\n * `block_number` - the block number.\n * `verbosity` - result format which allows 0 and 2. (**Optional**, the default is 2.)\n * `with_cycles` - whether the return cycles of block transactions. (**Optional**, default false.)\n\n ## Returns\n\n The RPC returns the block when `block_number` is less than or equal to the tip block\n number returned by [`get_tip_block_number`](#tymethod.get_tip_block_number) and returns\n null otherwise.\n\n Because of [chain reorganization](#chain-reorganization), the PRC may return null or even\n different blocks in different invocations with the same `block_number`.\n\n When `verbosity` is 2, it returns a JSON object as the `result`. See `BlockView` for the\n schema.\n\n When `verbosity` is 0, it returns a 0x-prefixed hex string as the `result`. The string\n encodes the block serialized by molecule using schema `table Block`.\n\n ## Errors\n\n * [`ChainIndexIsInconsistent (-201)`](../enum.RPCError.html#variant.ChainIndexIsInconsistent) - The index is inconsistent. It says a block hash is in the main chain, but cannot read it from the database.\n * [`DatabaseIsCorrupt (-202)`](../enum.RPCError.html#variant.DatabaseIsCorrupt) - The data read from database is dirty. Please report it as a bug.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_block_by_number\",\n   \"params\": [\n     \"0x400\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"header\": {\n       \"compact_target\": \"0x1e083126\",\n       \"dao\": \"0xb5a3e047474401001bc476b9ee573000c0c387962a38000000febffacf030000\",\n       \"epoch\": \"0x7080018000001\",\n       \"extra_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n       \"hash\": \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\",\n       \"nonce\": \"0x0\",\n       \"number\": \"0x400\",\n       \"parent_hash\": \"0xae003585fa15309b30b31aed3dcf385e9472c3c3e93746a6c4540629a6a1ed2d\",\n       \"proposals_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n       \"timestamp\": \"0x5cd2b117\",\n       \"transactions_root\": \"0xc47d5b78b3c4c4c853e2a32810818940d0ee403423bea9ec7b8e566d9595206c\",\n       \"version\": \"0x0\"\n     },\n     \"proposals\": [],\n     \"transactions\": [\n       {\n         \"cell_deps\": [],\n         \"hash\": \"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17\",\n         \"header_deps\": [],\n         \"inputs\": [\n           {\n             \"previous_output\": {\n               \"index\": \"0xffffffff\",\n               \"tx_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n             },\n             \"since\": \"0x400\"\n           }\n         ],\n         \"outputs\": [\n           {\n             \"capacity\": \"0x18e64b61cf\",\n             \"lock\": {\n               \"code_hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\",\n               \"hash_type\": \"data\",\n               \"args\": \"0x\"\n             },\n             \"type\": null\n           }\n         ],\n         \"outputs_data\": [\n           \"0x\"\n         ],\n         \"version\": \"0x0\",\n         \"witnesses\": [\n           \"0x450000000c000000410000003500000010000000300000003100000028e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5000000000000000000\"\n         ]\n       }\n     ],\n     \"uncles\": []\n   }\n }\n ```\n\n The response looks like below when `verbosity` is 0.\n\n ```text\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": \"0x...\"\n }\n ```\n\n When specifying with_cycles, the response object will be different like below:\n\n ```text\n {\n     \"id\": 42,\n     \"jsonrpc\": \"2.0\",\n     \"result\": {\n         \"block\": <Object> or \"0x...\",\n         \"cycles\": []\n     }\n }\n ```",
      "name": "get_block_by_number",
      "params": [
        {
          "name": "block_number",
          "schema": {
            "$ref": "#/components/schemas/Uint64"
          }
        },
        {
          "name": "verbosity",
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint32"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        {
          "name": "with_cycles",
          "schema": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      ],
      "result": {
        "name": "get_block_by_number",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/BlockResponse"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": " Returns the information about a block header by hash.\n\n ## Params\n\n * `block_hash` - the block hash.\n * `verbosity` - result format which allows 0 and 1. (**Optional**, the default is 1.)\n\n ## Returns\n\n The RPC returns a header or null. When the RPC returns a header, the block hash must equal to\n the parameter `block_hash`.\n\n If the block is in the [canonical chain](#canonical-chain), the RPC must return the header\n information. Otherwise, the behavior is undefined. The RPC may return blocks found in local\n storage or simply returns null for all blocks that are not in the canonical chain. And\n because of [chain reorganization](#chain-reorganization), for the same `block_hash`, the\n RPC may sometimes return null and sometimes return the block header.\n\n When `verbosity` is 1, it returns a JSON object as the `result`. See `HeaderView` for the\n schema.\n\n When `verbosity` is 0, it returns a 0x-prefixed hex string as the `result`. The string\n encodes the block header serialized by molecule using schema `table Header`.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_header\",\n   \"params\": [\n     \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"compact_target\": \"0x1e083126\",\n     \"dao\": \"0xb5a3e047474401001bc476b9ee573000c0c387962a38000000febffacf030000\",\n     \"epoch\": \"0x7080018000001\",\n     \"extra_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     \"hash\": \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\",\n     \"nonce\": \"0x0\",\n     \"number\": \"0x400\",\n     \"parent_hash\": \"0xae003585fa15309b30b31aed3dcf385e9472c3c3e93746a6c4540629a6a1ed2d\",\n     \"proposals_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     \"timestamp\": \"0x5cd2b117\",\n     \"transactions_root\": \"0xc47d5b78b3c4c4c853e2a32810818940d0ee403423bea9ec7b8e566d9595206c\",\n     \"version\": \"0x0\"\n   }\n }\n ```\n\n The response looks like below when `verbosity` is 0.\n\n ```text\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": \"0x...\"\n }\n ```",
      "name": "get_header",
      "params": [
        {
          "name": "block_hash",
          "schema": {
            "$ref": "#/components/schemas/H256"
          }
        },
        {
          "name": "verbosity",
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint32"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      ],
      "result": {
        "name": "get_header",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/Either_for_HeaderView_and_JsonBytes"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": " Returns the block header in the [canonical chain](#canonical-chain) with the specific block\n number.\n\n ## Params\n\n * `block_number` - Number of a block\n * `verbosity` - result format which allows 0 and 1. (**Optional**, the default is 1.)\n\n ## Returns\n\n The RPC returns the block header when `block_number` is less than or equal to the tip block\n number returned by [`get_tip_block_number`](#tymethod.get_tip_block_number) and returns\n null otherwise.\n\n Because of [chain reorganization](#chain-reorganization), the PRC may return null or even\n different block headers in different invocations with the same `block_number`.\n\n When `verbosity` is 1, it returns a JSON object as the `result`. See `HeaderView` for the\n schema.\n\n When `verbosity` is 0, it returns a 0x-prefixed hex string as the `result`. The string\n encodes the block header serialized by molecule using schema `table Header`.\n\n ## Errors\n\n * [`ChainIndexIsInconsistent (-201)`](../enum.RPCError.html#variant.ChainIndexIsInconsistent) - The index is inconsistent. It says a block hash is in the main chain, but cannot read it from the database.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_header_by_number\",\n   \"params\": [\n     \"0x400\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"compact_target\": \"0x1e083126\",\n     \"dao\": \"0xb5a3e047474401001bc476b9ee573000c0c387962a38000000febffacf030000\",\n     \"epoch\": \"0x7080018000001\",\n     \"extra_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     \"hash\": \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\",\n     \"nonce\": \"0x0\",\n     \"number\": \"0x400\",\n     \"parent_hash\": \"0xae003585fa15309b30b31aed3dcf385e9472c3c3e93746a6c4540629a6a1ed2d\",\n     \"proposals_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     \"timestamp\": \"0x5cd2b117\",\n     \"transactions_root\": \"0xc47d5b78b3c4c4c853e2a32810818940d0ee403423bea9ec7b8e566d9595206c\",\n     \"version\": \"0x0\"\n   }\n }\n ```\n\n The response looks like below when `verbosity` is 0.\n\n ```text\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": \"0x...\"\n }\n ```",
      "name": "get_header_by_number",
      "params": [
        {
          "name": "block_number",
          "schema": {
            "$ref": "#/components/schemas/Uint64"
          }
        },
        {
          "name": "verbosity",
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint32"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      ],
      "result": {
        "name": "get_header_by_number",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/Either_for_HeaderView_and_JsonBytes"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": " Returns the block filter by block hash.\n\n ## Params\n\n * `block_hash` - the block hash.\n\n ## Returns\n\n The block filter data\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_block_filter\",\n   \"params\": [\n     \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": null\n }\n ```\n\n The response looks like below when the block have block filter.\n\n ```text\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n    \"data\": \"0x...\",\n    \"hash\": \"0x...\"\n   }\n }\n ```",
      "name": "get_block_filter",
      "params": [
        {
          "name": "block_hash",
          "schema": {
            "$ref": "#/components/schemas/H256"
          }
        }
      ],
      "result": {
        "name": "get_block_filter",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/BlockFilter"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": " Returns the information about a transaction requested by transaction hash.\n\n ## Returns\n\n This RPC returns `null` if the transaction is not committed in the\n [canonical chain](#canonical-chain) nor the transaction memory pool.\n\n If the transaction is in the chain, the block hash is also returned.\n\n ## Params\n\n * `tx_hash` - Hash of a transaction\n * `verbosity` - result format which allows 0, 1 and 2. (**Optional**, the defaults to 2.)\n * `only_committed` - whether to query committed transaction only. (**Optional**, if not set, it will query all status of transactions.)\n\n ## Returns\n\n When verbosity=0, it's response value is as same as verbosity=2, but it\n return a 0x-prefixed hex encoded molecule packed::Transaction on `transaction` field\n\n When verbosity is 1: The RPC does not return the transaction content and the field transaction must be null.\n\n When verbosity is 2: if tx_status.status is pending, proposed, or committed,\n the RPC returns the transaction content as field transaction, otherwise the field is null.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_transaction\",\n   \"params\": [\n     \"0xa0ef4eb5f4ceeb08a4c8524d84c5da95dce2f608e0ca2ec8091191b0f330c6e3\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"transaction\": {\n       \"cell_deps\": [\n         {\n           \"dep_type\": \"code\",\n           \"out_point\": {\n             \"index\": \"0x0\",\n             \"tx_hash\": \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\"\n           }\n         }\n       ],\n       \"hash\": \"0xa0ef4eb5f4ceeb08a4c8524d84c5da95dce2f608e0ca2ec8091191b0f330c6e3\",\n       \"header_deps\": [\n         \"0x7978ec7ce5b507cfb52e149e36b1a23f6062ed150503c85bbf825da3599095ed\"\n       ],\n       \"inputs\": [\n         {\n           \"previous_output\": {\n             \"index\": \"0x0\",\n             \"tx_hash\": \"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17\"\n           },\n           \"since\": \"0x0\"\n         }\n       ],\n       \"outputs\": [\n         {\n           \"capacity\": \"0x2540be400\",\n           \"lock\": {\n             \"code_hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\",\n             \"hash_type\": \"data\",\n             \"args\": \"0x\"\n           },\n           \"type\": null\n         }\n       ],\n       \"outputs_data\": [\n         \"0x\"\n       ],\n       \"version\": \"0x0\",\n       \"witnesses\": []\n     },\n     \"cycles\": \"0x219\",\n     \"time_added_to_pool\" : \"0x187b3d137a1\",\n     \"fee\": \"0x16923f7dcf\",\n     \"min_replace_fee\": \"0x16923f7f6a\",\n     \"tx_status\": {\n       \"block_hash\": null,\n       \"block_number\": null,\n       \"status\": \"pending\",\n       \"reason\": null\n     }\n   }\n }\n ```\n\n\n The response looks like below when `verbosity` is 0.\n\n ```text\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"transaction\": \"0x.....\",\n     \"cycles\": \"0x219\",\n     \"tx_status\": {\n       \"block_hash\": null,\n       \"block_number\": null,\n       \"status\": \"pending\",\n       \"reason\": null\n     }\n   }\n }\n ```\n",
      "name": "get_transaction",
      "params": [
        {
          "name": "tx_hash",
          "schema": {
            "$ref": "#/components/schemas/H256"
          }
        },
        {
          "name": "verbosity",
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint32"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        {
          "name": "only_committed",
          "schema": {
            "type": [
              "boolean",
              "null"
            ]
          }
        }
      ],
      "result": {
        "name": "get_transaction",
        "schema": {
          "$ref": "#/components/schemas/TransactionWithStatusResponse"
        }
      }
    },
    {
      "description": " Returns the hash of a block in the [canonical chain](#canonical-chain) with the specified\n `block_number`.\n\n ## Params\n\n * `block_number` - Block number\n\n ## Returns\n\n The RPC returns the block hash when `block_number` is less than or equal to the tip block\n number returned by [`get_tip_block_number`](#tymethod.get_tip_block_number) and returns\n null otherwise.\n\n Because of [chain reorganization](#chain-reorganization), the PRC may return null or even\n different block hashes in different invocations with the same `block_number`.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_block_hash\",\n   \"params\": [\n     \"0x400\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\"\n }\n ```",
      "name": "get_block_hash",
      "params": [
        {
          "name": "block_number",
          "schema": {
            "$ref": "#/components/schemas/Uint64"
          }
        }
      ],
      "result": {
        "name": "get_block_hash",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/H256"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": " Returns the header with the highest block number in the [canonical chain](#canonical-chain).\n\n Because of [chain reorganization](#chain-reorganization), the block number returned can be\n less than previous invocations and different invocations may return different block headers\n with the same block number.\n\n ## Params\n\n * `verbosity` - result format which allows 0 and 1. (**Optional**, the default is 1.)\n\n ## Returns\n\n When `verbosity` is 1, the RPC returns a JSON object as the `result`. See HeaderView for the\n schema.\n\n When `verbosity` is 0, it returns a 0x-prefixed hex string as the `result`. The string\n encodes the header serialized by molecule using schema `table Header`.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_tip_header\",\n   \"params\": []\n }\n ```\n\n Response\n\n ```json\n {\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"compact_target\": \"0x1e083126\",\n     \"dao\": \"0xb5a3e047474401001bc476b9ee573000c0c387962a38000000febffacf030000\",\n     \"epoch\": \"0x7080018000001\",\n     \"extra_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     \"hash\": \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\",\n     \"nonce\": \"0x0\",\n     \"number\": \"0x400\",\n     \"parent_hash\": \"0xae003585fa15309b30b31aed3dcf385e9472c3c3e93746a6c4540629a6a1ed2d\",\n     \"proposals_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     \"timestamp\": \"0x5cd2b117\",\n     \"transactions_root\": \"0xc47d5b78b3c4c4c853e2a32810818940d0ee403423bea9ec7b8e566d9595206c\",\n     \"version\": \"0x0\"\n   },\n   \"id\": 42\n }\n ```\n\n The response looks like below when `verbosity` is 0.\n\n ```text\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": \"0x...\"\n }\n ```",
      "name": "get_tip_header",
      "params": [
        {
          "name": "verbosity",
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint32"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      ],
      "result": {
        "name": "get_tip_header",
        "schema": {
          "$ref": "#/components/schemas/Either_for_HeaderView_and_JsonBytes"
        }
      }
    },
    {
      "description": " Returns the status of a cell. The RPC returns extra information if it is a [live cell](#live-cell).\n\n ## Returns\n\n This RPC tells whether a cell is live or not.\n\n If the cell is live, the RPC will return details about the cell. Otherwise, the field `cell` is\n null in the result.\n\n If the cell is live and `with_data` is set to `false`, the field `cell.data` is null in the\n result.\n\n ## Params\n\n * `out_point` - Reference to the cell by transaction hash and output index.\n * `with_data` - Whether the RPC should return cell data. Cell data can be huge, if the client\n does not need the data, it should set this to `false` to save bandwidth.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_live_cell\",\n   \"params\": [\n     {\n       \"index\": \"0x0\",\n       \"tx_hash\": \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\"\n     },\n     true\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"cell\": {\n       \"data\": {\n         \"content\": \"0x7f454c460201010000000000000000000200f3000100000078000100000000004000000000000000980000000000000005000000400038000100400003000200010000000500000000000000000000000000010000000000000001000000000082000000000000008200000000000000001000000000000001459308d00573000000002e7368737472746162002e74657874000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000010000000600000000000000780001000000000078000000000000000a0000000000000000000000000000000200000000000000000000000000000001000000030000000000000000000000000000000000000082000000000000001100000000000000000000000000000001000000000000000000000000000000\",\n         \"hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\"\n       },\n       \"output\": {\n         \"capacity\": \"0x802665800\",\n         \"lock\": {\n           \"code_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n           \"hash_type\": \"data\",\n           \"args\": \"0x\"\n         },\n         \"type\": null\n       }\n     },\n     \"status\": \"live\"\n   }\n }\n ```",
      "name": "get_live_cell",
      "params": [
        {
          "name": "out_point",
          "schema": {
            "$ref": "#/components/schemas/OutPoint"
          }
        },
        {
          "name": "with_data",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "get_live_cell",
        "schema": {
          "$ref": "#/components/schemas/CellWithStatus"
        }
      }
    },
    {
      "description": " Returns the highest block number in the [canonical chain](#canonical-chain).\n\n Because of [chain reorganization](#chain-reorganization), the returned block number may be\n less than a value returned in the previous invocation.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_tip_block_number\",\n   \"params\": []\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": \"0x400\"\n }\n ```",
      "name": "get_tip_block_number",
      "params": [],
      "result": {
        "name": "get_tip_block_number",
        "schema": {
          "$ref": "#/components/schemas/Uint64"
        }
      }
    },
    {
      "description": " Returns the epoch with the highest number in the [canonical chain](#canonical-chain).\n\n Pay attention that like blocks with the specific block number may change because of [chain\n reorganization](#chain-reorganization), This RPC may return different epochs which have\n the same epoch number.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_current_epoch\",\n   \"params\": []\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"compact_target\": \"0x1e083126\",\n     \"length\": \"0x708\",\n     \"number\": \"0x1\",\n     \"start_number\": \"0x3e8\"\n   }\n }\n ```",
      "name": "get_current_epoch",
      "params": [],
      "result": {
        "name": "get_current_epoch",
        "schema": {
          "$ref": "#/components/schemas/EpochView"
        }
      }
    },
    {
      "description": " Returns the epoch in the [canonical chain](#canonical-chain) with the specific epoch number.\n\n ## Params\n\n * `epoch_number` - Epoch number\n\n ## Returns\n\n The RPC returns the epoch when `epoch_number` is less than or equal to the current epoch number\n returned by [`get_current_epoch`](#tymethod.get_current_epoch) and returns null otherwise.\n\n Because of [chain reorganization](#chain-reorganization), for the same `epoch_number`, this\n RPC may return null or different epochs in different invocations.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_epoch_by_number\",\n   \"params\": [\n     \"0x0\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"compact_target\": \"0x20010000\",\n     \"length\": \"0x3e8\",\n     \"number\": \"0x0\",\n     \"start_number\": \"0x0\"\n   }\n }\n ```",
      "name": "get_epoch_by_number",
      "params": [
        {
          "name": "epoch_number",
          "schema": {
            "$ref": "#/components/schemas/Uint64"
          }
        }
      ],
      "result": {
        "name": "get_epoch_by_number",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/EpochView"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": " Returns increased issuance, miner reward, and the total transaction fee of a block.\n\n This RPC returns null if the block is not in the [canonical chain](#canonical-chain).\n\n CKB delays CKB creation for miners. The output cells in the cellbase of block N are for the\n miner creating block `N - 1 - ProposalWindow.farthest`.\n\n In mainnet, `ProposalWindow.farthest` is 10, so the outputs in block 100 are rewards for\n miner creating block 89.\n\n Because of the delay, this RPC returns null if the block rewards are not finalized yet. For\n example, the economic state for block 89 is only available when the number returned by\n [`get_tip_block_number`](#tymethod.get_tip_block_number) is greater than or equal to 100.\n\n ## Params\n\n * `block_hash` - Specifies the block hash which rewards should be analyzed.\n\n ## Returns\n\n If the block with the hash `block_hash` is in the [canonical chain](#canonical-chain) and\n its rewards have been finalized, return the block rewards analysis for this block. A special\n case is that the return value for genesis block is null.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_block_economic_state\",\n   \"params\": [\n     \"0x02530b25ad0ff677acc365cb73de3e8cc09c7ddd58272e879252e199d08df83b\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"finalized_at\": \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\",\n     \"issuance\": {\n       \"primary\": \"0x18ce922bca\",\n       \"secondary\": \"0x7f02ec655\"\n     },\n     \"miner_reward\": {\n       \"committed\": \"0x0\",\n       \"primary\": \"0x18ce922bca\",\n       \"proposal\": \"0x0\",\n       \"secondary\": \"0x17b93605\"\n     },\n     \"txs_fee\": \"0x0\"\n   }\n }\n ```",
      "name": "get_block_economic_state",
      "params": [
        {
          "name": "block_hash",
          "schema": {
            "$ref": "#/components/schemas/H256"
          }
        }
      ],
      "result": {
        "name": "get_block_economic_state",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/BlockEconomicState"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": " Returns a Merkle proof that transactions are included in a block.\n\n ## Params\n\n * `tx_hashes` - Transaction hashes, all transactions must be in the same block\n * `block_hash` - An optional parameter, if specified, looks for transactions in the block with this hash\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_transaction_proof\",\n   \"params\": [\n     [ \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\" ]\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"block_hash\": \"0x7978ec7ce5b507cfb52e149e36b1a23f6062ed150503c85bbf825da3599095ed\",\n     \"proof\": {\n       \"indices\": [ \"0x0\" ],\n       \"lemmas\": []\n     },\n     \"witnesses_root\": \"0x2bb631f4a251ec39d943cc238fc1e39c7f0e99776e8a1e7be28a03c70c4f4853\"\n   }\n }\n ```",
      "name": "get_transaction_proof",
      "params": [
        {
          "name": "tx_hashes",
          "schema": {
            "items": {
              "$ref": "#/components/schemas/H256"
            },
            "type": "array"
          }
        },
        {
          "name": "block_hash",
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/H256"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      ],
      "result": {
        "name": "get_transaction_proof",
        "schema": {
          "$ref": "#/components/schemas/TransactionProof"
        }
      }
    },
    {
      "description": " Verifies that a proof points to transactions in a block, returning the transaction hashes it commits to.\n\n ## Parameters\n\n * `transaction_proof` - proof generated by [`get_transaction_proof`](#tymethod.get_transaction_proof).\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"verify_transaction_proof\",\n   \"params\": [\n     {\n       \"block_hash\": \"0x7978ec7ce5b507cfb52e149e36b1a23f6062ed150503c85bbf825da3599095ed\",\n       \"proof\": {\n         \"indices\": [ \"0x0\" ],\n         \"lemmas\": []\n       },\n       \"witnesses_root\": \"0x2bb631f4a251ec39d943cc238fc1e39c7f0e99776e8a1e7be28a03c70c4f4853\"\n     }\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": [\n     \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\"\n   ]\n }\n ```",
      "name": "verify_transaction_proof",
      "params": [
        {
          "name": "tx_proof",
          "schema": {
            "$ref": "#/components/schemas/TransactionProof"
          }
        }
      ],
      "result": {
        "name": "verify_transaction_proof",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/H256"
          },
          "type": "array"
        }
      }
    },
    {
      "description": " Returns a Merkle proof of transactions' witness included in a block.\n\n ## Params\n\n * `tx_hashes` - Transaction hashes, all transactions must be in the same block\n * `block_hash` - An optional parameter, if specified, looks for transactions in the block with this hash\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_transaction_and_witness_proof\",\n   \"params\": [\n     [ \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\" ]\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n     \"jsonrpc\": \"2.0\",\n     \"result\": {\n         \"block_hash\": \"0x7978ec7ce5b507cfb52e149e36b1a23f6062ed150503c85bbf825da3599095ed\",\n         \"transactions_proof\": {\n             \"indices\": [ \"0x0\" ],\n             \"lemmas\": []\n         },\n         \"witnesses_proof\": {\n             \"indices\": [\n                 \"0x0\"\n             ],\n             \"lemmas\": []\n         }\n     },\n     \"id\": 42\n }\n ```",
      "name": "get_transaction_and_witness_proof",
      "params": [
        {
          "name": "tx_hashes",
          "schema": {
            "items": {
              "$ref": "#/components/schemas/H256"
            },
            "type": "array"
          }
        },
        {
          "name": "block_hash",
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/H256"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      ],
      "result": {
        "name": "get_transaction_and_witness_proof",
        "schema": {
          "$ref": "#/components/schemas/TransactionAndWitnessProof"
        }
      }
    },
    {
      "description": " Verifies that a proof points to transactions in a block, returning the transaction hashes it commits to.\n\n ## Parameters\n\n * `tx_proof` - proof generated by [`get_transaction_and_witness_proof`](#tymethod.get_transaction_and_witness_proof).\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"verify_transaction_and_witness_proof\",\n   \"params\": [\n     {\n       \"block_hash\": \"0x7978ec7ce5b507cfb52e149e36b1a23f6062ed150503c85bbf825da3599095ed\",\n         \"transactions_proof\": {\n             \"indices\": [ \"0x0\" ],\n             \"lemmas\": []\n         },\n         \"witnesses_proof\": {\n             \"indices\": [\n                 \"0x0\"\n             ],\n             \"lemmas\": []\n         }\n     }\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": [\n     \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\"\n   ]\n }\n ```",
      "name": "verify_transaction_and_witness_proof",
      "params": [
        {
          "name": "tx_proof",
          "schema": {
            "$ref": "#/components/schemas/TransactionAndWitnessProof"
          }
        }
      ],
      "result": {
        "name": "verify_transaction_and_witness_proof",
        "schema": {
          "items": {
            "$ref": "#/components/schemas/H256"
          },
          "type": "array"
        }
      }
    },
    {
      "description": " Returns the information about a fork block by hash.\n\n ## Params\n\n * `block_hash` - the fork block hash.\n * `verbosity` - result format which allows 0 and 2. (**Optional**, the default is 2.)\n\n ## Returns\n\n The RPC returns a fork block or null. When the RPC returns a block, the block hash must equal to\n the parameter `block_hash`.\n\n Please note that due to the technical nature of the peer to peer sync, the RPC may return null or a fork block\n result on different nodes with same `block_hash` even they are fully synced to the [canonical chain](#canonical-chain).\n And because of [chain reorganization](#chain-reorganization), for the same `block_hash`, the\n RPC may sometimes return null and sometimes return the fork block.\n\n When `verbosity` is 2, it returns a JSON object as the `result`. See `BlockView` for the\n schema.\n\n When `verbosity` is 0, it returns a 0x-prefixed hex string as the `result`. The string\n encodes the block serialized by molecule using schema `table Block`.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_fork_block\",\n   \"params\": [\n     \"0xdca341a42890536551f99357612cef7148ed471e3b6419d0844a4e400be6ee94\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"header\": {\n       \"compact_target\": \"0x1e083126\",\n       \"dao\": \"0xb5a3e047474401001bc476b9ee573000c0c387962a38000000febffacf030000\",\n       \"epoch\": \"0x7080018000001\",\n       \"extra_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n       \"hash\": \"0xdca341a42890536551f99357612cef7148ed471e3b6419d0844a4e400be6ee94\",\n       \"nonce\": \"0x0\",\n       \"number\": \"0x400\",\n       \"parent_hash\": \"0xae003585fa15309b30b31aed3dcf385e9472c3c3e93746a6c4540629a6a1ed2d\",\n       \"proposals_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n       \"timestamp\": \"0x5cd2b118\",\n       \"transactions_root\": \"0xc47d5b78b3c4c4c853e2a32810818940d0ee403423bea9ec7b8e566d9595206c\",\n       \"version\": \"0x0\"\n     },\n     \"proposals\": [],\n     \"transactions\": [\n       {\n         \"cell_deps\": [],\n         \"hash\": \"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17\",\n         \"header_deps\": [],\n         \"inputs\": [\n           {\n             \"previous_output\": {\n               \"index\": \"0xffffffff\",\n               \"tx_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n             },\n             \"since\": \"0x400\"\n           }\n         ],\n         \"outputs\": [\n           {\n             \"capacity\": \"0x18e64b61cf\",\n             \"lock\": {\n               \"code_hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\",\n               \"hash_type\": \"data\",\n               \"args\": \"0x\"\n             },\n             \"type\": null\n           }\n         ],\n         \"outputs_data\": [\n           \"0x\"\n         ],\n         \"version\": \"0x0\",\n         \"witnesses\": [\n           \"0x450000000c000000410000003500000010000000300000003100000028e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5000000000000000000\"\n         ]\n       }\n     ],\n     \"uncles\": []\n   }\n }\n ```\n\n The response looks like below when `verbosity` is 0.\n\n ```text\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": \"0x...\"\n }\n ```",
      "name": "get_fork_block",
      "params": [
        {
          "name": "block_hash",
          "schema": {
            "$ref": "#/components/schemas/H256"
          }
        },
        {
          "name": "verbosity",
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint32"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      ],
      "result": {
        "name": "get_fork_block",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/Either_for_BlockView_and_JsonBytes"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": " Return various consensus parameters.\n\n ## Returns\n\n If any hardfork feature has `epoch=null`, it means the feature will never be activated.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_consensus\",\n   \"params\": []\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n         \"block_version\": \"0x0\",\n         \"cellbase_maturity\": \"0x10000000000\",\n         \"dao_type_hash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n         \"epoch_duration_target\": \"0x3840\",\n         \"genesis_hash\": \"0x7978ec7ce5b507cfb52e149e36b1a23f6062ed150503c85bbf825da3599095ed\",\n         \"hardfork_features\": [\n             { \"rfc\": \"0028\", \"epoch_number\": \"0x1526\" },\n             { \"rfc\": \"0029\", \"epoch_number\": \"0x0\" },\n             { \"rfc\": \"0030\", \"epoch_number\": \"0x0\" },\n             { \"rfc\": \"0031\", \"epoch_number\": \"0x0\" },\n             { \"rfc\": \"0032\", \"epoch_number\": \"0x1526\" },\n             { \"rfc\": \"0036\", \"epoch_number\": \"0x0\" },\n             { \"rfc\": \"0038\", \"epoch_number\": \"0x0\" },\n             { \"rfc\": \"0048\", \"epoch_number\": null },\n             { \"rfc\": \"0049\", \"epoch_number\": null }\n          ],\n         \"id\": \"main\",\n         \"initial_primary_epoch_reward\": \"0x71afd498d000\",\n         \"max_block_bytes\": \"0x91c08\",\n         \"max_block_cycles\": \"0xd09dc300\",\n         \"max_block_proposals_limit\": \"0x5dc\",\n         \"max_uncles_num\": \"0x2\",\n         \"median_time_block_count\": \"0x25\",\n         \"orphan_rate_target\": {\n             \"denom\": \"0x28\",\n             \"numer\": \"0x1\"\n         },\n         \"permanent_difficulty_in_dummy\": false,\n         \"primary_epoch_reward_halving_interval\": \"0x2238\",\n         \"proposer_reward_ratio\": {\n             \"denom\": \"0xa\",\n             \"numer\": \"0x4\"\n         },\n         \"secondary_epoch_reward\": \"0x37d0c8e28542\",\n         \"secp256k1_blake160_multisig_all_type_hash\": null,\n         \"secp256k1_blake160_sighash_all_type_hash\": null,\n         \"softforks\": {\n             \"testdummy\": {\n                 \"status\": \"rfc0043\",\n                 \"rfc0043\": {\n                     \"bit\": 1,\n                     \"min_activation_epoch\": \"0x0\",\n                     \"period\": \"0xa\",\n                     \"start\": \"0x0\",\n                     \"threshold\": {\n                         \"denom\": \"0x4\",\n                         \"numer\": \"0x3\"\n                     },\n                     \"timeout\": \"0x0\"\n                 }\n             }\n         },\n         \"tx_proposal_window\": {\n             \"closest\": \"0x2\",\n             \"farthest\": \"0xa\"\n         },\n         \"tx_version\": \"0x0\",\n         \"type_id_code_hash\": \"0x00000000000000000000000000000000000000000000000000545950455f4944\"\n     }\n }\n ```",
      "name": "get_consensus",
      "params": [],
      "result": {
        "name": "get_consensus",
        "schema": {
          "$ref": "#/components/schemas/Consensus"
        }
      }
    },
    {
      "description": " Returns the past median time by block hash.\n\n ## Params\n\n * `block_hash` - A median time is calculated for a consecutive block sequence. `block_hash` indicates the highest block of the sequence.\n\n ## Returns\n\n When the given block hash is not on the current canonical chain, this RPC returns null;\n otherwise returns the median time of the consecutive 37 blocks where the given block_hash has the highest height.\n\n Note that the given block is included in the median time. The included block number range is `[MAX(block - 36, 0), block]`.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_block_median_time\",\n   \"params\": [\n     \"0xa5f5c85987a15de25661e5a214f2c1449cd803f071acc7999820f25246471f40\"\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": \"0x5cd2b105\"\n }\n ```",
      "name": "get_block_median_time",
      "params": [
        {
          "name": "block_hash",
          "schema": {
            "$ref": "#/components/schemas/H256"
          }
        }
      ],
      "result": {
        "name": "get_block_median_time",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/Uint64"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": " `estimate_cycles` run a transaction and return the execution consumed cycles.\n\n This method will not check the transaction validity, but only run the lock script\n and type script and then return the execution cycles.\n\n It is used to estimate how many cycles the scripts consume.\n\n ## Errors\n\n * [`TransactionFailedToResolve (-301)`](../enum.RPCError.html#variant.TransactionFailedToResolve) - Failed to resolve the referenced cells and headers used in the transaction, as inputs or dependencies.\n * [`TransactionFailedToVerify (-302)`](../enum.RPCError.html#variant.TransactionFailedToVerify) - There is a script returns with an error.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"estimate_cycles\",\n   \"params\": [\n     {\n       \"cell_deps\": [\n         {\n           \"dep_type\": \"code\",\n           \"out_point\": {\n             \"index\": \"0x0\",\n             \"tx_hash\": \"0xa4037a893eb48e18ed4ef61034ce26eba9c585f15c9cee102ae58505565eccc3\"\n           }\n         }\n       ],\n       \"header_deps\": [\n         \"0x7978ec7ce5b507cfb52e149e36b1a23f6062ed150503c85bbf825da3599095ed\"\n       ],\n       \"inputs\": [\n         {\n           \"previous_output\": {\n             \"index\": \"0x0\",\n             \"tx_hash\": \"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb17\"\n           },\n           \"since\": \"0x0\"\n         }\n       ],\n       \"outputs\": [\n         {\n           \"capacity\": \"0x2540be400\",\n           \"lock\": {\n             \"code_hash\": \"0x28e83a1277d48add8e72fadaa9248559e1b632bab2bd60b27955ebc4c03800a5\",\n             \"hash_type\": \"data\",\n             \"args\": \"0x\"\n           },\n           \"type\": null\n         }\n       ],\n       \"outputs_data\": [\n         \"0x\"\n       ],\n       \"version\": \"0x0\",\n       \"witnesses\": []\n     }\n   ]\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"cycles\": \"0x219\"\n   }\n }\n ```",
      "name": "estimate_cycles",
      "params": [
        {
          "name": "tx",
          "schema": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      ],
      "result": {
        "name": "estimate_cycles",
        "schema": {
          "$ref": "#/components/schemas/EstimateCycles"
        }
      }
    },
    {
      "description": " Returns the fee_rate statistics of confirmed blocks on the chain\n\n ## Params\n\n * `target` - Specify the number (1 - 101) of confirmed blocks to be counted.\n  If the number is even, automatically add one. If not specified, defaults to 21\n\n ## Returns\n\n If the query finds the corresponding historical data,\n the corresponding statistics are returned,\n containing the mean and median, in shannons per kilo-weight.\n If not, it returns null.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_fee_rate_statics\",\n   \"params\": []\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"mean\": \"0xe79d\",\n     \"median\": \"0x14a8\"\n    }\n }\n ```",
      "name": "get_fee_rate_statics",
      "params": [
        {
          "name": "target",
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint64"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      ],
      "result": {
        "name": "get_fee_rate_statics",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/FeeRateStatistics"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    {
      "description": " Returns the fee_rate statistics of confirmed blocks on the chain\n\n ## Params\n\n * `target` - Specify the number (1 - 101) of confirmed blocks to be counted.\n  If the number is even, automatically add one. If not specified, defaults to 21\n\n ## Returns\n\n If the query finds the corresponding historical data,\n the corresponding statistics are returned,\n containing the mean and median, in shannons per kilo-weight.\n If not, it returns null.\n\n ## Examples\n\n Request\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"method\": \"get_fee_rate_statistics\",\n   \"params\": []\n }\n ```\n\n Response\n\n ```json\n {\n   \"id\": 42,\n   \"jsonrpc\": \"2.0\",\n   \"result\": {\n     \"mean\": \"0xe79d\",\n     \"median\": \"0x14a8\"\n    }\n }\n ```",
      "name": "get_fee_rate_statistics",
      "params": [
        {
          "name": "target",
          "schema": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Uint64"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      ],
      "result": {
        "name": "get_fee_rate_statistics",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/FeeRateStatistics"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    }
  ],
  "openrpc": "1.2.6"
}